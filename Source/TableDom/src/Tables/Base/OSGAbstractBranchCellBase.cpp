/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class AbstractBranchCell!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGCell.h"                    // ChildCells Class

#include "OSGAbstractBranchCellBase.h"
#include "OSGAbstractBranchCell.h"
#include "OSGTable.h"
#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::AbstractBranchCell
    Table Branch Cell
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Cell *          AbstractBranchCellBase::_mfChildCells
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<AbstractBranchCell *>::_type("AbstractBranchCellPtr", "AbstractCellPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(AbstractBranchCell *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           AbstractBranchCell *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           AbstractBranchCell *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void AbstractBranchCellBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecCellPtr::Description(
        MFUnrecCellPtr::getClassType(),
        "ChildCells",
        "",
        ChildCellsFieldId, ChildCellsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AbstractBranchCell::editHandleChildCells),
        static_cast<FieldGetMethodSig >(&AbstractBranchCell::getHandleChildCells));

    oType.addInitialDesc(pDesc);
}


AbstractBranchCellBase::TypeObject AbstractBranchCellBase::_type(
    AbstractBranchCellBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    AbstractBranchCell::initMethod,
    AbstractBranchCell::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&AbstractBranchCell::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"AbstractBranchCell\"\n"
    "\tparent=\"AbstractCell\"\n"
    "    library=\"ContribTableDom\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"false\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "Table Branch Cell\n"
    "\t<Field\n"
    "\t\tname=\"ChildCells\"\n"
    "\t\ttype=\"Cell\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "Table Branch Cell\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &AbstractBranchCellBase::getType(void)
{
    return _type;
}

const FieldContainerType &AbstractBranchCellBase::getType(void) const
{
    return _type;
}

UInt32 AbstractBranchCellBase::getContainerSize(void) const
{
    return sizeof(AbstractBranchCell);
}

/*------------------------- decorator get ------------------------------*/


//! Get the AbstractBranchCell::_mfChildCells field.
const MFUnrecCellPtr *AbstractBranchCellBase::getMFChildCells(void) const
{
    return &_mfChildCells;
}

MFUnrecCellPtr      *AbstractBranchCellBase::editMFChildCells     (void)
{
    editMField(ChildCellsFieldMask, _mfChildCells);

    return &_mfChildCells;
}



void AbstractBranchCellBase::pushToChildCells(Cell * const value)
{
    editMField(ChildCellsFieldMask, _mfChildCells);

    _mfChildCells.push_back(value);
}

void AbstractBranchCellBase::assignChildCells(const MFUnrecCellPtr    &value)
{
    MFUnrecCellPtr   ::const_iterator elemIt  =
        value.begin();
    MFUnrecCellPtr   ::const_iterator elemEnd =
        value.end  ();

    static_cast<AbstractBranchCell *>(this)->clearChildCells();

    while(elemIt != elemEnd)
    {
        this->pushToChildCells(*elemIt);

        ++elemIt;
    }
}

void AbstractBranchCellBase::removeFromChildCells(UInt32 uiIndex)
{
    if(uiIndex < _mfChildCells.size())
    {
        editMField(ChildCellsFieldMask, _mfChildCells);

        _mfChildCells.erase(uiIndex);
    }
}

void AbstractBranchCellBase::removeObjFromChildCells(Cell * const value)
{
    Int32 iElemIdx = _mfChildCells.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ChildCellsFieldMask, _mfChildCells);

        _mfChildCells.erase(iElemIdx);
    }
}
void AbstractBranchCellBase::clearChildCells(void)
{
    editMField(ChildCellsFieldMask, _mfChildCells);


    _mfChildCells.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 AbstractBranchCellBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ChildCellsFieldMask & whichField))
    {
        returnValue += _mfChildCells.getBinSize();
    }

    return returnValue;
}

void AbstractBranchCellBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ChildCellsFieldMask & whichField))
    {
        _mfChildCells.copyToBin(pMem);
    }
}

void AbstractBranchCellBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ChildCellsFieldMask & whichField))
    {
        _mfChildCells.copyFromBin(pMem);
    }
}



/*------------------------- constructors ----------------------------------*/

AbstractBranchCellBase::AbstractBranchCellBase(void) :
    Inherited(),
    _mfChildCells             ()
{
}

AbstractBranchCellBase::AbstractBranchCellBase(const AbstractBranchCellBase &source) :
    Inherited(source),
    _mfChildCells             ()
{
}


/*-------------------------- destructors ----------------------------------*/

AbstractBranchCellBase::~AbstractBranchCellBase(void)
{
}

void AbstractBranchCellBase::onCreate(const AbstractBranchCell *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        AbstractBranchCell *pThis = static_cast<AbstractBranchCell *>(this);

        MFUnrecCellPtr::const_iterator ChildCellsIt  =
            source->_mfChildCells.begin();
        MFUnrecCellPtr::const_iterator ChildCellsEnd =
            source->_mfChildCells.end  ();

        while(ChildCellsIt != ChildCellsEnd)
        {
            pThis->pushToChildCells(*ChildCellsIt);

            ++ChildCellsIt;
        }
    }
}

GetFieldHandlePtr AbstractBranchCellBase::getHandleChildCells      (void) const
{
    MFUnrecCellPtr::GetHandlePtr returnValue(
        new  MFUnrecCellPtr::GetHandle(
             &_mfChildCells,
             this->getType().getFieldDesc(ChildCellsFieldId),
             const_cast<AbstractBranchCellBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AbstractBranchCellBase::editHandleChildCells     (void)
{
    MFUnrecCellPtr::EditHandlePtr returnValue(
        new  MFUnrecCellPtr::EditHandle(
             &_mfChildCells,
             this->getType().getFieldDesc(ChildCellsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&AbstractBranchCell::pushToChildCells,
                    static_cast<AbstractBranchCell *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&AbstractBranchCell::removeFromChildCells,
                    static_cast<AbstractBranchCell *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&AbstractBranchCell::removeObjFromChildCells,
                    static_cast<AbstractBranchCell *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&AbstractBranchCell::clearChildCells,
                    static_cast<AbstractBranchCell *>(this)));

    editMField(ChildCellsFieldMask, _mfChildCells);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void AbstractBranchCellBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    AbstractBranchCell *pThis = static_cast<AbstractBranchCell *>(this);

    pThis->execSync(static_cast<AbstractBranchCell *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void AbstractBranchCellBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<AbstractBranchCell *>(this)->clearChildCells();


}


OSG_END_NAMESPACE
