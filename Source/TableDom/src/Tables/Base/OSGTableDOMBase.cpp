/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             Achyuthan Vasanth (achvas88@gmail.com)*
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TableDOM!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGCell.h"                    // RootCell Class

#include "OSGTableDOMBase.h"
#include "OSGTableDOM.h"

#include <boost/bind.hpp>

#include "OSGEventDetails.h"

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TableDOM
    UI Table.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Cell *          TableDOMBase::_sfRootCell
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<TableDOM *>::_type("TableDOMPtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(TableDOM *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           TableDOM *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           TableDOM *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void TableDOMBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecCellPtr::Description(
        SFUnrecCellPtr::getClassType(),
        "RootCell",
        "",
        RootCellFieldId, RootCellFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TableDOM::editHandleRootCell),
        static_cast<FieldGetMethodSig >(&TableDOM::getHandleRootCell));

    oType.addInitialDesc(pDesc);
}


TableDOMBase::TypeObject TableDOMBase::_type(
    TableDOMBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    TableDOM::initMethod,
    TableDOM::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&TableDOM::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"TableDOM\"\n"
    "\tparent=\"AttachmentContainer\"\n"
    "    library=\"ContribTableDom\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             Achyuthan Vasanth (achvas88@gmail.com)\"\n"
    ">\n"
    "UI Table.\n"
    "\t<Field\n"
    "\t\tname=\"RootCell\"\n"
    "\t\ttype=\"Cell\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"Changed\"\n"
    "\t\tdetailsType=\"TableDOMEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"Insert\"\n"
    "\t\tdetailsType=\"TableDOMEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"Remove\"\n"
    "\t\tdetailsType=\"TableDOMEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"UndoableEditHappened\"\n"
    "\t\tdetailsType=\"UndoableEditEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "</FieldContainer>\n",
    "UI Table.\n"
    );

//! TableDOM Produced Events

EventDescription *TableDOMBase::_eventDesc[] =
{
    new EventDescription("Changed", 
                          "",
                          ChangedEventId, 
                          FieldTraits<TableDOMEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&TableDOMBase::getHandleChangedSignal)),

    new EventDescription("Insert", 
                          "",
                          InsertEventId, 
                          FieldTraits<TableDOMEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&TableDOMBase::getHandleInsertSignal)),

    new EventDescription("Remove", 
                          "",
                          RemoveEventId, 
                          FieldTraits<TableDOMEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&TableDOMBase::getHandleRemoveSignal)),

    new EventDescription("UndoableEditHappened", 
                          "",
                          UndoableEditHappenedEventId, 
                          FieldTraits<UndoableEditEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&TableDOMBase::getHandleUndoableEditHappenedSignal))

};

EventProducerType TableDOMBase::_producerType(
    "TableDOMProducerType",
    "EventProducerType",
    "",
    InitEventProducerFunctor(),
    _eventDesc,
    sizeof(_eventDesc));

/*------------------------------ get -----------------------------------*/

FieldContainerType &TableDOMBase::getType(void)
{
    return _type;
}

const FieldContainerType &TableDOMBase::getType(void) const
{
    return _type;
}

const EventProducerType &TableDOMBase::getProducerType(void) const
{
    return _producerType;
}

UInt32 TableDOMBase::getContainerSize(void) const
{
    return sizeof(TableDOM);
}

/*------------------------- decorator get ------------------------------*/


//! Get the TableDOM::_sfRootCell field.
const SFUnrecCellPtr *TableDOMBase::getSFRootCell(void) const
{
    return &_sfRootCell;
}

SFUnrecCellPtr      *TableDOMBase::editSFRootCell       (void)
{
    editSField(RootCellFieldMask);

    return &_sfRootCell;
}





/*------------------------------ access -----------------------------------*/

UInt32 TableDOMBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (RootCellFieldMask & whichField))
    {
        returnValue += _sfRootCell.getBinSize();
    }

    return returnValue;
}

void TableDOMBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (RootCellFieldMask & whichField))
    {
        _sfRootCell.copyToBin(pMem);
    }
}

void TableDOMBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (RootCellFieldMask & whichField))
    {
        _sfRootCell.copyFromBin(pMem);
    }
}



/*------------------------- event producers ----------------------------------*/
void TableDOMBase::produceEvent(UInt32 eventId, EventDetails* const e)
{
    switch(eventId)
    {
    case ChangedEventId:
        OSG_ASSERT(dynamic_cast<ChangedEventDetailsType* const>(e));

        _ChangedEvent.set_combiner(ConsumableEventCombiner(e));
        _ChangedEvent(dynamic_cast<ChangedEventDetailsType* const>(e), ChangedEventId);
        break;
    case InsertEventId:
        OSG_ASSERT(dynamic_cast<InsertEventDetailsType* const>(e));

        _InsertEvent.set_combiner(ConsumableEventCombiner(e));
        _InsertEvent(dynamic_cast<InsertEventDetailsType* const>(e), InsertEventId);
        break;
    case RemoveEventId:
        OSG_ASSERT(dynamic_cast<RemoveEventDetailsType* const>(e));

        _RemoveEvent.set_combiner(ConsumableEventCombiner(e));
        _RemoveEvent(dynamic_cast<RemoveEventDetailsType* const>(e), RemoveEventId);
        break;
    case UndoableEditHappenedEventId:
        OSG_ASSERT(dynamic_cast<UndoableEditHappenedEventDetailsType* const>(e));

        _UndoableEditHappenedEvent.set_combiner(ConsumableEventCombiner(e));
        _UndoableEditHappenedEvent(dynamic_cast<UndoableEditHappenedEventDetailsType* const>(e), UndoableEditHappenedEventId);
        break;
    default:
        SWARNING << "No event defined with ID " << eventId << std::endl;
        break;
    }
}

boost::signals2::connection TableDOMBase::connectEvent(UInt32 eventId, 
                                                             const BaseEventType::slot_type &listener, 
                                                             boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case ChangedEventId:
        return _ChangedEvent.connect(listener, at);
        break;
    case InsertEventId:
        return _InsertEvent.connect(listener, at);
        break;
    case RemoveEventId:
        return _RemoveEvent.connect(listener, at);
        break;
    case UndoableEditHappenedEventId:
        return _UndoableEditHappenedEvent.connect(listener, at);
        break;
    default:
        SWARNING << "No event defined with ID " << eventId << std::endl;
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}

boost::signals2::connection  TableDOMBase::connectEvent(UInt32 eventId, 
                                                              const BaseEventType::group_type &group,
                                                              const BaseEventType::slot_type &listener,
                                                              boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case ChangedEventId:
        return _ChangedEvent.connect(group, listener, at);
        break;
    case InsertEventId:
        return _InsertEvent.connect(group, listener, at);
        break;
    case RemoveEventId:
        return _RemoveEvent.connect(group, listener, at);
        break;
    case UndoableEditHappenedEventId:
        return _UndoableEditHappenedEvent.connect(group, listener, at);
        break;
    default:
        SWARNING << "No event defined with ID " << eventId << std::endl;
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}
    
void  TableDOMBase::disconnectEvent(UInt32 eventId, const BaseEventType::group_type &group)
{
    switch(eventId)
    {
    case ChangedEventId:
        _ChangedEvent.disconnect(group);
        break;
    case InsertEventId:
        _InsertEvent.disconnect(group);
        break;
    case RemoveEventId:
        _RemoveEvent.disconnect(group);
        break;
    case UndoableEditHappenedEventId:
        _UndoableEditHappenedEvent.disconnect(group);
        break;
    default:
        SWARNING << "No event defined with ID " << eventId << std::endl;
        break;
    }
}

void  TableDOMBase::disconnectAllSlotsEvent(UInt32 eventId)
{
    switch(eventId)
    {
    case ChangedEventId:
        _ChangedEvent.disconnect_all_slots();
        break;
    case InsertEventId:
        _InsertEvent.disconnect_all_slots();
        break;
    case RemoveEventId:
        _RemoveEvent.disconnect_all_slots();
        break;
    case UndoableEditHappenedEventId:
        _UndoableEditHappenedEvent.disconnect_all_slots();
        break;
    default:
        SWARNING << "No event defined with ID " << eventId << std::endl;
        break;
    }
}

bool  TableDOMBase::isEmptyEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case ChangedEventId:
        return _ChangedEvent.empty();
        break;
    case InsertEventId:
        return _InsertEvent.empty();
        break;
    case RemoveEventId:
        return _RemoveEvent.empty();
        break;
    case UndoableEditHappenedEventId:
        return _UndoableEditHappenedEvent.empty();
        break;
    default:
        SWARNING << "No event defined with ID " << eventId << std::endl;
        return true;
        break;
    }
}

UInt32  TableDOMBase::numSlotsEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case ChangedEventId:
        return _ChangedEvent.num_slots();
        break;
    case InsertEventId:
        return _InsertEvent.num_slots();
        break;
    case RemoveEventId:
        return _RemoveEvent.num_slots();
        break;
    case UndoableEditHappenedEventId:
        return _UndoableEditHappenedEvent.num_slots();
        break;
    default:
        SWARNING << "No event defined with ID " << eventId << std::endl;
        return 0;
        break;
    }
}


/*------------------------- constructors ----------------------------------*/

TableDOMBase::TableDOMBase(void) :
    Inherited(),
    _sfRootCell               (NULL)
{
}

TableDOMBase::TableDOMBase(const TableDOMBase &source) :
    Inherited(source),
    _sfRootCell               (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

TableDOMBase::~TableDOMBase(void)
{
}

void TableDOMBase::onCreate(const TableDOM *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        TableDOM *pThis = static_cast<TableDOM *>(this);

        pThis->setRootCell(source->getRootCell());
    }
}

GetFieldHandlePtr TableDOMBase::getHandleRootCell        (void) const
{
    SFUnrecCellPtr::GetHandlePtr returnValue(
        new  SFUnrecCellPtr::GetHandle(
             &_sfRootCell,
             this->getType().getFieldDesc(RootCellFieldId),
             const_cast<TableDOMBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TableDOMBase::editHandleRootCell       (void)
{
    SFUnrecCellPtr::EditHandlePtr returnValue(
        new  SFUnrecCellPtr::EditHandle(
             &_sfRootCell,
             this->getType().getFieldDesc(RootCellFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TableDOM::setRootCell,
                    static_cast<TableDOM *>(this), _1));

    editSField(RootCellFieldMask);

    return returnValue;
}


GetEventHandlePtr TableDOMBase::getHandleChangedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ChangedEventType>(
             const_cast<ChangedEventType *>(&_ChangedEvent),
             _producerType.getEventDescription(ChangedEventId),
             const_cast<TableDOMBase *>(this)));

    return returnValue;
}

GetEventHandlePtr TableDOMBase::getHandleInsertSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<InsertEventType>(
             const_cast<InsertEventType *>(&_InsertEvent),
             _producerType.getEventDescription(InsertEventId),
             const_cast<TableDOMBase *>(this)));

    return returnValue;
}

GetEventHandlePtr TableDOMBase::getHandleRemoveSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<RemoveEventType>(
             const_cast<RemoveEventType *>(&_RemoveEvent),
             _producerType.getEventDescription(RemoveEventId),
             const_cast<TableDOMBase *>(this)));

    return returnValue;
}

GetEventHandlePtr TableDOMBase::getHandleUndoableEditHappenedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<UndoableEditHappenedEventType>(
             const_cast<UndoableEditHappenedEventType *>(&_UndoableEditHappenedEvent),
             _producerType.getEventDescription(UndoableEditHappenedEventId),
             const_cast<TableDOMBase *>(this)));

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void TableDOMBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    TableDOM *pThis = static_cast<TableDOM *>(this);

    pThis->execSync(static_cast<TableDOM *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void TableDOMBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<TableDOM *>(this)->setRootCell(NULL);


}


OSG_END_NAMESPACE
