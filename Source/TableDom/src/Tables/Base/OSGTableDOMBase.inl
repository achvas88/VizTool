/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             Achyuthan Vasanth (achvas88@gmail.com)*
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TableDOM!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include "OSGTableDOMEventDetails.h"
#include "OSGUndoableEditEventDetails.h"

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &TableDOMBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 TableDOMBase::getClassTypeId(void)
{
    return _type.getId();
}
//! access the producer type of the class
inline
const EventProducerType &TableDOMBase::getProducerClassType(void)
{
    return _producerType;
}

//! access the producer type id of the class
inline
UInt32 TableDOMBase::getProducerClassTypeId(void)
{
    return _producerType.getId();
}

inline
OSG::UInt16 TableDOMBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the TableDOM::_sfRootCell field.
inline
Cell * TableDOMBase::getRootCell(void) const
{
    return _sfRootCell.getValue();
}

//! Set the value of the TableDOM::_sfRootCell field.
inline
void TableDOMBase::setRootCell(Cell * const value)
{
    editSField(RootCellFieldMask);

    _sfRootCell.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void TableDOMBase::execSync (      TableDOMBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (RootCellFieldMask & whichField))
        _sfRootCell.syncWith(pFrom->_sfRootCell);
}
#endif


inline
const Char8 *TableDOMBase::getClassname(void)
{
    return "TableDOM";
}

inline
UInt32 TableDOMBase::getNumProducedEvents(void) const
{
    return getProducerType().getNumEventDescs();
}

inline
const EventDescription *TableDOMBase::getProducedEventDescription(const std::string &ProducedEventName) const
{
    return getProducerType().findEventDescription(ProducedEventName);
}

inline
const EventDescription *TableDOMBase::getProducedEventDescription(UInt32 ProducedEventId) const
{
    return getProducerType().getEventDescription(ProducedEventId);
}

inline
UInt32 TableDOMBase::getProducedEventId(const std::string &ProducedEventName) const
{
    return getProducerType().getProducedEventId(ProducedEventName);
}

inline
boost::signals2::connection  TableDOMBase::connectChanged(const ChangedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _ChangedEvent.connect(listener, at);
}

inline
boost::signals2::connection  TableDOMBase::connectChanged(const ChangedEventType::group_type &group,
                                                    const ChangedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _ChangedEvent.connect(group, listener, at);
}

inline
void  TableDOMBase::disconnectChanged(const ChangedEventType::group_type &group)
{
    _ChangedEvent.disconnect(group);
}

inline
void  TableDOMBase::disconnectAllSlotsChanged(void)
{
    _ChangedEvent.disconnect_all_slots();
}

inline
bool  TableDOMBase::isEmptyChanged(void) const
{
    return _ChangedEvent.empty();
}

inline
UInt32  TableDOMBase::numSlotsChanged(void) const
{
    return _ChangedEvent.num_slots();
}

inline
void TableDOMBase::produceChanged(ChangedEventDetailsType* const e)
{
    produceEvent(ChangedEventId, e);
}

inline
boost::signals2::connection  TableDOMBase::connectInsert(const InsertEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _InsertEvent.connect(listener, at);
}

inline
boost::signals2::connection  TableDOMBase::connectInsert(const InsertEventType::group_type &group,
                                                    const InsertEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _InsertEvent.connect(group, listener, at);
}

inline
void  TableDOMBase::disconnectInsert(const InsertEventType::group_type &group)
{
    _InsertEvent.disconnect(group);
}

inline
void  TableDOMBase::disconnectAllSlotsInsert(void)
{
    _InsertEvent.disconnect_all_slots();
}

inline
bool  TableDOMBase::isEmptyInsert(void) const
{
    return _InsertEvent.empty();
}

inline
UInt32  TableDOMBase::numSlotsInsert(void) const
{
    return _InsertEvent.num_slots();
}

inline
void TableDOMBase::produceInsert(InsertEventDetailsType* const e)
{
    produceEvent(InsertEventId, e);
}

inline
boost::signals2::connection  TableDOMBase::connectRemove(const RemoveEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _RemoveEvent.connect(listener, at);
}

inline
boost::signals2::connection  TableDOMBase::connectRemove(const RemoveEventType::group_type &group,
                                                    const RemoveEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _RemoveEvent.connect(group, listener, at);
}

inline
void  TableDOMBase::disconnectRemove(const RemoveEventType::group_type &group)
{
    _RemoveEvent.disconnect(group);
}

inline
void  TableDOMBase::disconnectAllSlotsRemove(void)
{
    _RemoveEvent.disconnect_all_slots();
}

inline
bool  TableDOMBase::isEmptyRemove(void) const
{
    return _RemoveEvent.empty();
}

inline
UInt32  TableDOMBase::numSlotsRemove(void) const
{
    return _RemoveEvent.num_slots();
}

inline
void TableDOMBase::produceRemove(RemoveEventDetailsType* const e)
{
    produceEvent(RemoveEventId, e);
}

inline
boost::signals2::connection  TableDOMBase::connectUndoableEditHappened(const UndoableEditHappenedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _UndoableEditHappenedEvent.connect(listener, at);
}

inline
boost::signals2::connection  TableDOMBase::connectUndoableEditHappened(const UndoableEditHappenedEventType::group_type &group,
                                                    const UndoableEditHappenedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _UndoableEditHappenedEvent.connect(group, listener, at);
}

inline
void  TableDOMBase::disconnectUndoableEditHappened(const UndoableEditHappenedEventType::group_type &group)
{
    _UndoableEditHappenedEvent.disconnect(group);
}

inline
void  TableDOMBase::disconnectAllSlotsUndoableEditHappened(void)
{
    _UndoableEditHappenedEvent.disconnect_all_slots();
}

inline
bool  TableDOMBase::isEmptyUndoableEditHappened(void) const
{
    return _UndoableEditHappenedEvent.empty();
}

inline
UInt32  TableDOMBase::numSlotsUndoableEditHappened(void) const
{
    return _UndoableEditHappenedEvent.num_slots();
}

inline
void TableDOMBase::produceUndoableEditHappened(UndoableEditHappenedEventDetailsType* const e)
{
    produceEvent(UndoableEditHappenedEventId, e);
}

OSG_GEN_CONTAINERPTR(TableDOM);

OSG_END_NAMESPACE

