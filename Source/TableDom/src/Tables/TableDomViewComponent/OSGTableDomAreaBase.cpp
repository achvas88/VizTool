/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TableDomArea!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGTableDOM.h"                // TableDOMModel Class
#include "OSGTableDomLayoutManager.h"   // LayoutManager Class
#include "OSGUIFont.h"                  // Font Class

#include "OSGTableDomAreaBase.h"
#include "OSGTableDomArea.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TableDomArea
    A UI TableDomArea
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var TableDOM *      TableDomAreaBase::_sfTableDOMModel
    
*/

/*! \var TableDomLayoutManager * TableDomAreaBase::_sfLayoutManager
    
*/

/*! \var UIFont *        TableDomAreaBase::_sfFont
    
*/

/*! \var bool            TableDomAreaBase::_sfEditable
    
*/

/*! \var Color4f         TableDomAreaBase::_sfBackgroundColor
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<TableDomArea *>::_type("TableDomAreaPtr", "ComponentPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(TableDomArea *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           TableDomArea *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           TableDomArea *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void TableDomAreaBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecTableDOMPtr::Description(
        SFUnrecTableDOMPtr::getClassType(),
        "TableDOMModel",
        "",
        TableDOMModelFieldId, TableDOMModelFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TableDomArea::editHandleTableDOMModel),
        static_cast<FieldGetMethodSig >(&TableDomArea::getHandleTableDOMModel));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChildTableDomLayoutManagerPtr::Description(
        SFUnrecChildTableDomLayoutManagerPtr::getClassType(),
        "LayoutManager",
        "",
        LayoutManagerFieldId, LayoutManagerFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FNullCheckAccess),
        static_cast<FieldEditMethodSig>(&TableDomArea::editHandleLayoutManager),
        static_cast<FieldGetMethodSig >(&TableDomArea::getHandleLayoutManager));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecUIFontPtr::Description(
        SFUnrecUIFontPtr::getClassType(),
        "Font",
        "",
        FontFieldId, FontFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TableDomArea::editHandleFont),
        static_cast<FieldGetMethodSig >(&TableDomArea::getHandleFont));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "Editable",
        "",
        EditableFieldId, EditableFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TableDomArea::editHandleEditable),
        static_cast<FieldGetMethodSig >(&TableDomArea::getHandleEditable));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "BackgroundColor",
        "",
        BackgroundColorFieldId, BackgroundColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TableDomArea::editHandleBackgroundColor),
        static_cast<FieldGetMethodSig >(&TableDomArea::getHandleBackgroundColor));

    oType.addInitialDesc(pDesc);
}


TableDomAreaBase::TypeObject TableDomAreaBase::_type(
    TableDomAreaBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&TableDomAreaBase::createEmptyLocal),
    TableDomArea::initMethod,
    TableDomArea::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&TableDomArea::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"TableDomArea\"\n"
    "\tparent=\"Component\"\n"
    "\tlibrary=\"ContribTableDom\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "\tparentProducer=\"Component\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI TableDomArea\n"
    "\n"
    "\t<Field\n"
    "\t\tname=\"TableDOMModel\"\n"
    "\t\ttype=\"TableDOM\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t\n"
    "\t<Field\n"
    "\t\tname=\"LayoutManager\"\n"
    "\t\ttype=\"TableDomLayoutManager\"\n"
    "\t\tcardinality=\"single\"\n"
    "        category=\"childpointer\"\n"
    "        childParentType=\"FieldContainer\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        ptrFieldAccess = \"nullCheck\"\n"
    "        linkParentField=\"ParentTableDomArea\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t\n"
    "\t<Field\n"
    "\t\tname=\"Font\"\n"
    "\t\ttype=\"UIFont\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t\n"
    "\t<Field\n"
    "\t\tname=\"Editable\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "        category=\"data\"\n"
    "        visibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "    >\n"
    "\t</Field>\n"
    "\t\n"
    "\t<Field\n"
    "\t\tname=\"BackgroundColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcardinality=\"single\"\n"
    "        category=\"data\"\n"
    "        visibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.0,1.0,1.0,1.0\"\n"
    "    >\n"
    "\t</Field>\n"
    "\t\n"
    "\t\n"
    "</FieldContainer>\n",
    "A UI TableDomArea\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &TableDomAreaBase::getType(void)
{
    return _type;
}

const FieldContainerType &TableDomAreaBase::getType(void) const
{
    return _type;
}

UInt32 TableDomAreaBase::getContainerSize(void) const
{
    return sizeof(TableDomArea);
}

/*------------------------- decorator get ------------------------------*/


//! Get the TableDomArea::_sfTableDOMModel field.
const SFUnrecTableDOMPtr *TableDomAreaBase::getSFTableDOMModel(void) const
{
    return &_sfTableDOMModel;
}

SFUnrecTableDOMPtr  *TableDomAreaBase::editSFTableDOMModel  (void)
{
    editSField(TableDOMModelFieldMask);

    return &_sfTableDOMModel;
}

//! Get the TableDomArea::_sfLayoutManager field.
const SFUnrecChildTableDomLayoutManagerPtr *TableDomAreaBase::getSFLayoutManager(void) const
{
    return &_sfLayoutManager;
}

SFUnrecChildTableDomLayoutManagerPtr *TableDomAreaBase::editSFLayoutManager  (void)
{
    editSField(LayoutManagerFieldMask);

    return &_sfLayoutManager;
}

//! Get the TableDomArea::_sfFont field.
const SFUnrecUIFontPtr *TableDomAreaBase::getSFFont(void) const
{
    return &_sfFont;
}

SFUnrecUIFontPtr    *TableDomAreaBase::editSFFont           (void)
{
    editSField(FontFieldMask);

    return &_sfFont;
}

SFBool *TableDomAreaBase::editSFEditable(void)
{
    editSField(EditableFieldMask);

    return &_sfEditable;
}

const SFBool *TableDomAreaBase::getSFEditable(void) const
{
    return &_sfEditable;
}


SFColor4f *TableDomAreaBase::editSFBackgroundColor(void)
{
    editSField(BackgroundColorFieldMask);

    return &_sfBackgroundColor;
}

const SFColor4f *TableDomAreaBase::getSFBackgroundColor(void) const
{
    return &_sfBackgroundColor;
}






/*------------------------------ access -----------------------------------*/

UInt32 TableDomAreaBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (TableDOMModelFieldMask & whichField))
    {
        returnValue += _sfTableDOMModel.getBinSize();
    }
    if(FieldBits::NoField != (LayoutManagerFieldMask & whichField))
    {
        returnValue += _sfLayoutManager.getBinSize();
    }
    if(FieldBits::NoField != (FontFieldMask & whichField))
    {
        returnValue += _sfFont.getBinSize();
    }
    if(FieldBits::NoField != (EditableFieldMask & whichField))
    {
        returnValue += _sfEditable.getBinSize();
    }
    if(FieldBits::NoField != (BackgroundColorFieldMask & whichField))
    {
        returnValue += _sfBackgroundColor.getBinSize();
    }

    return returnValue;
}

void TableDomAreaBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (TableDOMModelFieldMask & whichField))
    {
        _sfTableDOMModel.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LayoutManagerFieldMask & whichField))
    {
        _sfLayoutManager.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FontFieldMask & whichField))
    {
        _sfFont.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EditableFieldMask & whichField))
    {
        _sfEditable.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundColorFieldMask & whichField))
    {
        _sfBackgroundColor.copyToBin(pMem);
    }
}

void TableDomAreaBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (TableDOMModelFieldMask & whichField))
    {
        _sfTableDOMModel.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LayoutManagerFieldMask & whichField))
    {
        _sfLayoutManager.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FontFieldMask & whichField))
    {
        _sfFont.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EditableFieldMask & whichField))
    {
        _sfEditable.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundColorFieldMask & whichField))
    {
        _sfBackgroundColor.copyFromBin(pMem);
    }
}

//! create a new instance of the class
TableDomAreaTransitPtr TableDomAreaBase::createLocal(BitVector bFlags)
{
    TableDomAreaTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<TableDomArea>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
TableDomAreaTransitPtr TableDomAreaBase::createDependent(BitVector bFlags)
{
    TableDomAreaTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<TableDomArea>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
TableDomAreaTransitPtr TableDomAreaBase::create(void)
{
    TableDomAreaTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<TableDomArea>(tmpPtr);
    }

    return fc;
}

TableDomArea *TableDomAreaBase::createEmptyLocal(BitVector bFlags)
{
    TableDomArea *returnValue;

    newPtr<TableDomArea>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
TableDomArea *TableDomAreaBase::createEmpty(void)
{
    TableDomArea *returnValue;

    newPtr<TableDomArea>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr TableDomAreaBase::shallowCopyLocal(
    BitVector bFlags) const
{
    TableDomArea *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TableDomArea *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr TableDomAreaBase::shallowCopyDependent(
    BitVector bFlags) const
{
    TableDomArea *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TableDomArea *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr TableDomAreaBase::shallowCopy(void) const
{
    TableDomArea *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const TableDomArea *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

TableDomAreaBase::TableDomAreaBase(void) :
    Inherited(),
    _sfTableDOMModel          (NULL),
    _sfLayoutManager          (this,
                          LayoutManagerFieldId,
                          TableDomLayoutManager::ParentTableDomAreaFieldId),
    _sfFont                   (NULL),
    _sfEditable               (bool(false)),
    _sfBackgroundColor        (Color4f(1.0,1.0,1.0,1.0))
{
}

TableDomAreaBase::TableDomAreaBase(const TableDomAreaBase &source) :
    Inherited(source),
    _sfTableDOMModel          (NULL),
    _sfLayoutManager          (this,
                          LayoutManagerFieldId,
                          TableDomLayoutManager::ParentTableDomAreaFieldId),
    _sfFont                   (NULL),
    _sfEditable               (source._sfEditable               ),
    _sfBackgroundColor        (source._sfBackgroundColor        )
{
}


/*-------------------------- destructors ----------------------------------*/

TableDomAreaBase::~TableDomAreaBase(void)
{
}

/*-------------------------------------------------------------------------*/
/* Child linking                                                           */

bool TableDomAreaBase::unlinkChild(
    FieldContainer * const pChild,
    UInt16           const childFieldId)
{
    if(childFieldId == LayoutManagerFieldId)
    {
        TableDomLayoutManager * pTypedChild =
            dynamic_cast<TableDomLayoutManager *>(pChild);

        if(pTypedChild != NULL)
        {
            if(pTypedChild == _sfLayoutManager.getValue())
            {
                editSField(LayoutManagerFieldMask);

                _sfLayoutManager.setValue(NULL);

                return true;
            }

            FWARNING(("TableDomAreaBase::unlinkParent: Child <-> "
                      "Parent link inconsistent.\n"));

            return false;
        }

        return false;
    }


    return Inherited::unlinkChild(pChild, childFieldId);
}

void TableDomAreaBase::onCreate(const TableDomArea *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        TableDomArea *pThis = static_cast<TableDomArea *>(this);

        pThis->setTableDOMModel(source->getTableDOMModel());

        pThis->setLayoutManager(source->getLayoutManager());

        pThis->setFont(source->getFont());
    }
}

GetFieldHandlePtr TableDomAreaBase::getHandleTableDOMModel   (void) const
{
    SFUnrecTableDOMPtr::GetHandlePtr returnValue(
        new  SFUnrecTableDOMPtr::GetHandle(
             &_sfTableDOMModel,
             this->getType().getFieldDesc(TableDOMModelFieldId),
             const_cast<TableDomAreaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TableDomAreaBase::editHandleTableDOMModel  (void)
{
    SFUnrecTableDOMPtr::EditHandlePtr returnValue(
        new  SFUnrecTableDOMPtr::EditHandle(
             &_sfTableDOMModel,
             this->getType().getFieldDesc(TableDOMModelFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TableDomArea::setTableDOMModel,
                    static_cast<TableDomArea *>(this), _1));

    editSField(TableDOMModelFieldMask);

    return returnValue;
}

GetFieldHandlePtr TableDomAreaBase::getHandleLayoutManager   (void) const
{
    SFUnrecChildTableDomLayoutManagerPtr::GetHandlePtr returnValue(
        new  SFUnrecChildTableDomLayoutManagerPtr::GetHandle(
             &_sfLayoutManager,
             this->getType().getFieldDesc(LayoutManagerFieldId),
             const_cast<TableDomAreaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TableDomAreaBase::editHandleLayoutManager  (void)
{
    SFUnrecChildTableDomLayoutManagerPtr::EditHandlePtr returnValue(
        new  SFUnrecChildTableDomLayoutManagerPtr::EditHandle(
             &_sfLayoutManager,
             this->getType().getFieldDesc(LayoutManagerFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TableDomArea::setLayoutManager,
                    static_cast<TableDomArea *>(this), _1));

    editSField(LayoutManagerFieldMask);

    return returnValue;
}

GetFieldHandlePtr TableDomAreaBase::getHandleFont            (void) const
{
    SFUnrecUIFontPtr::GetHandlePtr returnValue(
        new  SFUnrecUIFontPtr::GetHandle(
             &_sfFont,
             this->getType().getFieldDesc(FontFieldId),
             const_cast<TableDomAreaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TableDomAreaBase::editHandleFont           (void)
{
    SFUnrecUIFontPtr::EditHandlePtr returnValue(
        new  SFUnrecUIFontPtr::EditHandle(
             &_sfFont,
             this->getType().getFieldDesc(FontFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TableDomArea::setFont,
                    static_cast<TableDomArea *>(this), _1));

    editSField(FontFieldMask);

    return returnValue;
}

GetFieldHandlePtr TableDomAreaBase::getHandleEditable        (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfEditable,
             this->getType().getFieldDesc(EditableFieldId),
             const_cast<TableDomAreaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TableDomAreaBase::editHandleEditable       (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfEditable,
             this->getType().getFieldDesc(EditableFieldId),
             this));


    editSField(EditableFieldMask);

    return returnValue;
}

GetFieldHandlePtr TableDomAreaBase::getHandleBackgroundColor (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfBackgroundColor,
             this->getType().getFieldDesc(BackgroundColorFieldId),
             const_cast<TableDomAreaBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TableDomAreaBase::editHandleBackgroundColor(void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfBackgroundColor,
             this->getType().getFieldDesc(BackgroundColorFieldId),
             this));


    editSField(BackgroundColorFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void TableDomAreaBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    TableDomArea *pThis = static_cast<TableDomArea *>(this);

    pThis->execSync(static_cast<TableDomArea *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *TableDomAreaBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    TableDomArea *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const TableDomArea *>(pRefAspect),
                  dynamic_cast<const TableDomArea *>(this));

    return returnValue;
}
#endif

void TableDomAreaBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<TableDomArea *>(this)->setTableDOMModel(NULL);

    static_cast<TableDomArea *>(this)->setLayoutManager(NULL);

    static_cast<TableDomArea *>(this)->setFont(NULL);


}


OSG_END_NAMESPACE
