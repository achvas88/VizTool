/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)*
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TableDomView!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &TableDomViewBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 TableDomViewBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 TableDomViewBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the TableDomView::_sfCell field.
inline
Cell * TableDomViewBase::getCell(void) const
{
    return _sfCell.getValue();
}

//! Set the value of the TableDomView::_sfCell field.
inline
void TableDomViewBase::setCell(Cell * const value)
{
    editSField(CellFieldMask);

    _sfCell.setValue(value);
}
//! Get the value of the TableDomView::_sfCellPosition field.

inline
Pnt2f &TableDomViewBase::editCellPosition(void)
{
    editSField(CellPositionFieldMask);

    return _sfCellPosition.getValue();
}

//! Get the value of the TableDomView::_sfCellPosition field.
inline
const Pnt2f &TableDomViewBase::getCellPosition(void) const
{
    return _sfCellPosition.getValue();
}

//! Set the value of the TableDomView::_sfCellPosition field.
inline
void TableDomViewBase::setCellPosition(const Pnt2f &value)
{
    editSField(CellPositionFieldMask);

    _sfCellPosition.setValue(value);
}
//! Get the value of the TableDomView::_sfCellWidth field.

inline
Real32 &TableDomViewBase::editCellWidth(void)
{
    editSField(CellWidthFieldMask);

    return _sfCellWidth.getValue();
}

//! Get the value of the TableDomView::_sfCellWidth field.
inline
      Real32  TableDomViewBase::getCellWidth(void) const
{
    return _sfCellWidth.getValue();
}

//! Set the value of the TableDomView::_sfCellWidth field.
inline
void TableDomViewBase::setCellWidth(const Real32 value)
{
    editSField(CellWidthFieldMask);

    _sfCellWidth.setValue(value);
}
//! Get the value of the TableDomView::_sfCellHeight field.

inline
Real32 &TableDomViewBase::editCellHeight(void)
{
    editSField(CellHeightFieldMask);

    return _sfCellHeight.getValue();
}

//! Get the value of the TableDomView::_sfCellHeight field.
inline
      Real32  TableDomViewBase::getCellHeight(void) const
{
    return _sfCellHeight.getValue();
}

//! Set the value of the TableDomView::_sfCellHeight field.
inline
void TableDomViewBase::setCellHeight(const Real32 value)
{
    editSField(CellHeightFieldMask);

    _sfCellHeight.setValue(value);
}
//! Get the value of the TableDomView::_sfIsSelected field.

inline
bool &TableDomViewBase::editIsSelected(void)
{
    editSField(IsSelectedFieldMask);

    return _sfIsSelected.getValue();
}

//! Get the value of the TableDomView::_sfIsSelected field.
inline
      bool  TableDomViewBase::getIsSelected(void) const
{
    return _sfIsSelected.getValue();
}

//! Set the value of the TableDomView::_sfIsSelected field.
inline
void TableDomViewBase::setIsSelected(const bool value)
{
    editSField(IsSelectedFieldMask);

    _sfIsSelected.setValue(value);
}

//! Get the value of the TableDomView::_sfFont field.
inline
UIFont * TableDomViewBase::getFont(void) const
{
    return _sfFont.getValue();
}

//! Set the value of the TableDomView::_sfFont field.
inline
void TableDomViewBase::setFont(UIFont * const value)
{
    editSField(FontFieldMask);

    _sfFont.setValue(value);
}
//! Get the value of the TableDomView::_sfSelectionBoxColor field.

inline
Color4f &TableDomViewBase::editSelectionBoxColor(void)
{
    editSField(SelectionBoxColorFieldMask);

    return _sfSelectionBoxColor.getValue();
}

//! Get the value of the TableDomView::_sfSelectionBoxColor field.
inline
const Color4f &TableDomViewBase::getSelectionBoxColor(void) const
{
    return _sfSelectionBoxColor.getValue();
}

//! Set the value of the TableDomView::_sfSelectionBoxColor field.
inline
void TableDomViewBase::setSelectionBoxColor(const Color4f &value)
{
    editSField(SelectionBoxColorFieldMask);

    _sfSelectionBoxColor.setValue(value);
}
//! Get the value of the TableDomView::_sfSelectionTextColor field.

inline
Color4f &TableDomViewBase::editSelectionTextColor(void)
{
    editSField(SelectionTextColorFieldMask);

    return _sfSelectionTextColor.getValue();
}

//! Get the value of the TableDomView::_sfSelectionTextColor field.
inline
const Color4f &TableDomViewBase::getSelectionTextColor(void) const
{
    return _sfSelectionTextColor.getValue();
}

//! Set the value of the TableDomView::_sfSelectionTextColor field.
inline
void TableDomViewBase::setSelectionTextColor(const Color4f &value)
{
    editSField(SelectionTextColorFieldMask);

    _sfSelectionTextColor.setValue(value);
}
//! Get the value of the TableDomView::_sfActiveTextColor field.

inline
Color4f &TableDomViewBase::editActiveTextColor(void)
{
    editSField(ActiveTextColorFieldMask);

    return _sfActiveTextColor.getValue();
}

//! Get the value of the TableDomView::_sfActiveTextColor field.
inline
const Color4f &TableDomViewBase::getActiveTextColor(void) const
{
    return _sfActiveTextColor.getValue();
}

//! Set the value of the TableDomView::_sfActiveTextColor field.
inline
void TableDomViewBase::setActiveTextColor(const Color4f &value)
{
    editSField(ActiveTextColorFieldMask);

    _sfActiveTextColor.setValue(value);
}
//! Get the value of the TableDomView::_sfFocusedTextColor field.

inline
Color4f &TableDomViewBase::editFocusedTextColor(void)
{
    editSField(FocusedTextColorFieldMask);

    return _sfFocusedTextColor.getValue();
}

//! Get the value of the TableDomView::_sfFocusedTextColor field.
inline
const Color4f &TableDomViewBase::getFocusedTextColor(void) const
{
    return _sfFocusedTextColor.getValue();
}

//! Set the value of the TableDomView::_sfFocusedTextColor field.
inline
void TableDomViewBase::setFocusedTextColor(const Color4f &value)
{
    editSField(FocusedTextColorFieldMask);

    _sfFocusedTextColor.setValue(value);
}
//! Get the value of the TableDomView::_sfRolloverTextColor field.

inline
Color4f &TableDomViewBase::editRolloverTextColor(void)
{
    editSField(RolloverTextColorFieldMask);

    return _sfRolloverTextColor.getValue();
}

//! Get the value of the TableDomView::_sfRolloverTextColor field.
inline
const Color4f &TableDomViewBase::getRolloverTextColor(void) const
{
    return _sfRolloverTextColor.getValue();
}

//! Set the value of the TableDomView::_sfRolloverTextColor field.
inline
void TableDomViewBase::setRolloverTextColor(const Color4f &value)
{
    editSField(RolloverTextColorFieldMask);

    _sfRolloverTextColor.setValue(value);
}
//! Get the value of the TableDomView::_sfDisabledTextColor field.

inline
Color4f &TableDomViewBase::editDisabledTextColor(void)
{
    editSField(DisabledTextColorFieldMask);

    return _sfDisabledTextColor.getValue();
}

//! Get the value of the TableDomView::_sfDisabledTextColor field.
inline
const Color4f &TableDomViewBase::getDisabledTextColor(void) const
{
    return _sfDisabledTextColor.getValue();
}

//! Set the value of the TableDomView::_sfDisabledTextColor field.
inline
void TableDomViewBase::setDisabledTextColor(const Color4f &value)
{
    editSField(DisabledTextColorFieldMask);

    _sfDisabledTextColor.setValue(value);
}
//! Get the value of the TableDomView::_sfTextColor field.

inline
Color4f &TableDomViewBase::editTextColor(void)
{
    editSField(TextColorFieldMask);

    return _sfTextColor.getValue();
}

//! Get the value of the TableDomView::_sfTextColor field.
inline
const Color4f &TableDomViewBase::getTextColor(void) const
{
    return _sfTextColor.getValue();
}

//! Set the value of the TableDomView::_sfTextColor field.
inline
void TableDomViewBase::setTextColor(const Color4f &value)
{
    editSField(TextColorFieldMask);

    _sfTextColor.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void TableDomViewBase::execSync (      TableDomViewBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (CellFieldMask & whichField))
        _sfCell.syncWith(pFrom->_sfCell);

    if(FieldBits::NoField != (CellPositionFieldMask & whichField))
        _sfCellPosition.syncWith(pFrom->_sfCellPosition);

    if(FieldBits::NoField != (CellWidthFieldMask & whichField))
        _sfCellWidth.syncWith(pFrom->_sfCellWidth);

    if(FieldBits::NoField != (CellHeightFieldMask & whichField))
        _sfCellHeight.syncWith(pFrom->_sfCellHeight);

    if(FieldBits::NoField != (IsSelectedFieldMask & whichField))
        _sfIsSelected.syncWith(pFrom->_sfIsSelected);

    if(FieldBits::NoField != (FontFieldMask & whichField))
        _sfFont.syncWith(pFrom->_sfFont);

    if(FieldBits::NoField != (SelectionBoxColorFieldMask & whichField))
        _sfSelectionBoxColor.syncWith(pFrom->_sfSelectionBoxColor);

    if(FieldBits::NoField != (SelectionTextColorFieldMask & whichField))
        _sfSelectionTextColor.syncWith(pFrom->_sfSelectionTextColor);

    if(FieldBits::NoField != (ActiveTextColorFieldMask & whichField))
        _sfActiveTextColor.syncWith(pFrom->_sfActiveTextColor);

    if(FieldBits::NoField != (FocusedTextColorFieldMask & whichField))
        _sfFocusedTextColor.syncWith(pFrom->_sfFocusedTextColor);

    if(FieldBits::NoField != (RolloverTextColorFieldMask & whichField))
        _sfRolloverTextColor.syncWith(pFrom->_sfRolloverTextColor);

    if(FieldBits::NoField != (DisabledTextColorFieldMask & whichField))
        _sfDisabledTextColor.syncWith(pFrom->_sfDisabledTextColor);

    if(FieldBits::NoField != (TextColorFieldMask & whichField))
        _sfTextColor.syncWith(pFrom->_sfTextColor);
}
#endif


inline
const Char8 *TableDomViewBase::getClassname(void)
{
    return "TableDomView";
}
OSG_GEN_CONTAINERPTR(TableDomView);

OSG_END_NAMESPACE

