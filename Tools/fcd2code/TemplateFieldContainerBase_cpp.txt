/*---------------------------------------------------------------------------*\
 *                             VizTool                                 		 *
 *                                                                           *
 *               Copyright (C) 2010-2011 by Achyuthan Vasanth                *
 *                                                                           *
@@if hasAuthors
 *   authors:  @!Authors!@*
@@else // hasAuthors
 *   authors: achvas88@gmail.com                                             *
@@endif // hasAuthors
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published            *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU General Public                 *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class @!Classname!@!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

@@AdditionalPriorityIncludes@@
#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

@@if useLocalIncludes
#include "@!HeaderPrefix!@OSGConfig.h"
@@else // useLocalIncludes
#include <@!HeaderPrefix!@OSGConfig.h>
@@endif // useLocalIncludes

@@AdditionalIncludes@@

@@BeginFieldLoop@@
    @@if field.needDefaultInclude
#include @!field.DefaultInclude:30!@   // @!field.Name!@ default header
    @@endif // field.needDefaultInclude
@@EndFieldLoop@@

@@BeginFieldLoop@@
    @@if field.isPtrField
        @@if field.needTypeInclude
#include @!field.TypeInclude:30!@ // @!field.Name!@ Class
        @@endif // field.isPtrField
    @@endif // field.needTypeInclude
@@EndFieldLoop@@

#include "VT@!Classname!@Base.h"
#include "VT@!Classname!@.h"

#include <boost/bind.hpp>
@@if hasProducedEvents

@@if useLocalIncludes
#include "@!HeaderPrefix!@OSGEventDetails.h"
@@else // useLocalIncludes
#include <@!HeaderPrefix!@OSGEventDetails.h>
@@endif // useLocalIncludes
@@endif // hasProducedMethods

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::@!Classname!@
    @!Description!@
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

    @@if isDecorator
/*! \var @!Parent!@Ptr @!Classname!@Base::_sfDecoratee
    The object being decorated
*/
    @@else // isDecorator
        @@BeginFieldLoop@@
/*! \var @!field.FullType:15!@ @!Classname!@Base::_@!field.VarName!@
    @!field.Description!@
*/

        @@EndFieldLoop@@
    @@endif // isDecorator

/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<@!Classname!@ *>::_type("@!Classname!@Ptr", "@!RealParent!@Ptr");
#endif

@@if PointerField
OSG_FIELDTRAITS_GETTYPE(@!Classname!@ *)

    @@if SFPointerField
OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           @!Classname!@ *,
                           0);
    @@endif // SFPointerField

    @@if MFPointerField
OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           @!Classname!@ *,
                           0);
    @@endif // MFPointerField
@@else
OSG_FIELDTRAITS_GETTYPE(@!Classname!@ *)
@@endif // PointerField
@@if ChildField

DataType &FieldTraits< @!Classname!@ *, @!ChildNS!@ >::getType(void)
{
    return FieldTraits<@!Classname!@ *, 0>::getType();
}

@@endif
@@if ChildSFields

OSG_EXPORT_PTR_SFIELD(ChildPointerSField,
                      @!Classname!@ *,
                      UnrecordedRefCountPolicy,
                      @!ChildNS!@);

@@endif
@@if ChildMFields

OSG_EXPORT_PTR_MFIELD(ChildPointerMField,
                      @!Classname!@ *,
                      UnrecordedRefCountPolicy,
                      @!ChildNS!@);

@@endif
@@if ParentField

DataType &FieldTraits<@!Classname!@ *, @!ParentNS!@ >::getType(void)
{
    return FieldTraits<@!Classname!@ *, 0>::getType();
}

@@endif
@@if ParentSFields

OSG_SFIELDTYPE_INST(ParentPointerSField,
                    @!Classname!@ *,
                    NoRefCountPolicy,
                    @!ParentNS!@);

OSG_FIELD_DLLEXPORT_DEF3(ParentPointerSField,
                         @!Classname!@ *,
                         NoRefCountPolicy,
                         @!ParentNS!@);

@@endif
@@if ParentMFields

OSG_MFIELDTYPE_INST(ParentPointerMField,
                    @!Classname!@ *,
                    NoRefCountPolicy,
                    @!ParentNS!@);

OSG_FIELD_DLLEXPORT_DEF3(ParentPointerMField,
                         @!Classname!@ *,
                         NoRefCountPolicy,
                         @!ParentNS!@);

@@endif

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void @!Classname!@Base::classDescInserter(TypeObject &oType)
{
@@if hasMixinParent
    Inherited::classDescInserter(oType);

@@endif
    @@if hasFields
    FieldDescriptionBase *pDesc = NULL;

    @@endif // hasFields
    @@if isDecorator
    pDesc = new SFUnrec@!Parent!@Ptr::Description(
        SFUnrec@!Parent!@Ptr::getClassType(),
        "decoratee",
        "undocumented decoratee",
        DecorateeFieldId, DecorateeFieldMask,
        false,
        @!DecorateeFieldFlags!@,
        static_cast<FieldEditMethodSig>(&@!Classname!@::editHandleDecoratee),
        static_cast<FieldGetMethodSig >(&@!Classname!@::getHandleDecoratee ));

    oType.addInitialDesc(pDesc);
    @@else // isDecorator
        @@BeginFieldLoop@@

    pDesc = new @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps!@::Description(
        @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps!@::getClassType(),
        "@!field.DescName!@",
        @!field.SafeDescription!@,
        @!field.Name!@FieldId, @!field.Name!@FieldMask,
        @!field.Visibility!@,
        @!field.Flags!@,
    @@if !field.noAccess
        static_cast<FieldEditMethodSig>(&@!Classname!@::editHandle@!field.Name!@),
        static_cast<FieldGetMethodSig >(&@!Classname!@::getHandle@!field.Name!@));
    @@else  //!field.noAccess
        static_cast     <FieldEditMethodSig>(&@!Classname!@::invalidEditField),
        static_cast     <FieldGetMethodSig >(&@!Classname!@::invalidGetField));
    @@endif //!field.noAccess

    oType.addInitialDesc(pDesc);
        @@EndFieldLoop@@
    @@endif // isDecorator
}


@!Classname!@Base::TypeObject @!Classname!@Base::_type(
    @!Classname!@Base::getClassname(),
    Inherited::getClassname(),
    "@!Group!@",
    @!Namespace!@,
@@if isAbstract
    NULL,
@@else // isAbstract
    reinterpret_cast<PrototypeCreateF>(&@!Classname!@Base::createEmptyLocal),
@@endif // isAbstract
    @!Classname!@::initMethod,
    @!Classname!@::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&@!Classname!@::classDescInserter),
    false,
    @!FieldsUnmarkedOnCreate!@,
    @!Fcdxml!@,
    @!SafeDescription!@
    );
@@if hasProducedEvents

//! @!Classname!@ Produced Events

EventDescription *@!Classname!@Base::_eventDesc[] =
{
@@BeginProducedEventLoop@@
    new EventDescription("@!producedEvent.Name!@", 
                          "@!producedEvent.Description!@",
                          @!producedEvent.Name!@EventId, 
                          FieldTraits<@!producedEvent.TypeRaw!@ *>::getType(),
    @@if producedEvent.consumable
                          true,
    @@else 
                          false,
    @@endif 
                          static_cast<EventGetMethod>(&@!Classname!@Base::getHandle@!producedEvent.Name!@Signal))@!producedEvent.Separator!@

@@EndProducedEventLoop@@
};

EventProducerType @!Classname!@Base::_producerType(
    "@!Classname!@ProducerType",
@@if isRootProducer 
    "EventProducerType",
@@else 
    "@!parentProducer!@ProducerType",
@@endif 
    "",
    InitEventProducerFunctor(),
    _eventDesc,
    sizeof(_eventDesc));
@@endif 

/*------------------------------ get -----------------------------------*/

FieldContainerType &@!Classname!@Base::getType(void)
{
    return _type;
}

const FieldContainerType &@!Classname!@Base::getType(void) const
{
    return _type;
}

@@if hasProducedEvents 
const EventProducerType &@!Classname!@Base::getProducerType(void) const
{
    return _producerType;
}

@@endif 
UInt32 @!Classname!@Base::getContainerSize(void) const
{
    return sizeof(@!Classname!@);
}

/*------------------------- decorator get ------------------------------*/

@@if isDecorator
const SFUnrec@!Parent!@Ptr *@!Classname!@Base::getSFDecoratee(void) const
{
    return &_sfDecoratee;
}

    @@BeginFieldLoop@@
        @@if !field.noAccess
        @@if field.isPtrField
//! Get the @!Classname!@::_@!field.VarName!@ field.
const @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps!@ *@!Classname!@Base::get@!field.CARD!@@!field.Name!@(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->get@!field.CARD!@@!field.Name!@();
    }
    else
    {
        return NULL;
    }
}
//! Get the @!Classname!@::_@!field.VarName!@ field.
@!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps!@ *@!Classname!@Base::edit@!field.CARD!@@!field.Name!@(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->edit@!field.CARD!@@!field.Name!@();
    }
    else
    {
        return NULL;
    }
}
        @@else // field.isPtrField
@!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps!@ *@!Classname!@Base::edit@!field.CARD!@@!field.Name!@(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->edit@!field.CARD!@@!field.Name!@();
    }
    else
    {
        return NULL;
    }
}

const @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps!@ *@!Classname!@Base::get@!field.CARD!@@!field.Name!@(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->get@!field.CARD!@@!field.Name!@();
    }
    else
    {
        return NULL;
    }
}
        @@endif // field.isPtrField
        @@endif //!field.noAccess

    @@EndFieldLoop@@
@@endif // isDecorator

@@if !isDecorator
    @@BeginFieldLoop@@
        @@if !field.noAccess
        @@if field.isPtrField
//! Get the @!Classname!@::_@!field.VarName!@ field.
const @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps!@ *@!Classname!@Base::get@!field.CARD!@@!field.Name!@(void) const
{
    return &_@!field.VarName!@;
}
            @@if field.ptrFieldStandardAccess

@!field.CARD!@@!field.FieldTypeCaps:17!@ *@!Classname!@Base::edit@!field.CARD!@@!field.Name:15!@(void)
{
            @@if field.isSField
    editSField(@!field.Name!@FieldMask);
            @@else
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);
            @@endif

    return &_@!field.VarName!@;
}
            @@endif
            @@if field.isSField
                @@if field.ptrFieldNullCheckAccess

@!field.CARD!@@!field.FieldTypeCaps:17!@ *@!Classname!@Base::edit@!field.CARD!@@!field.Name:15!@(void)
{
            @@if field.isSField
    editSField(@!field.Name!@FieldMask);
            @@else
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);
            @@endif

    return &_@!field.VarName!@;
}
                @@endif
            @@endif
        @@else // field.isPtrField
@!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps!@ *@!Classname!@Base::edit@!field.CARD!@@!field.Name!@(void)
{
            @@if field.isMField
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);
            @@else // field.isMField
    editSField(@!field.Name!@FieldMask);
            @@endif // field.isMField

    return &_@!field.VarName!@;
}

const @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps!@ *@!Classname!@Base::get@!field.CARD!@@!field.Name!@(void) const
{
    return &_@!field.VarName!@;
}

        @@endif // field.isPtrField
        @@endif //!field.noAccess

    @@EndFieldLoop@@
@@endif // !isDecorator


@@BeginMFFieldLoop@@
    @@if field.isPtrField
    @@if !field.noAccess
        @@if field.writePushToField
void @!Classname!@Base::@!field.PushToField!@(@!field.Type!@ const value)
{
            @@if field.ptrFieldNullCheckAccess
    if(value == NULL)
        return;

            @@endif // field.ptrFieldNullCheckAccess
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    _mf@!field.Name!@.push_back(value);
}

        @@endif // field.writePushToField
        @@if field.writeAssignMField
void @!Classname!@Base::@!field.AssignMField:15!@(const @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps:15!@ &value)
{
    @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps:15!@::const_iterator elemIt  =
        value.begin();
    @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps:15!@::const_iterator elemEnd =
        value.end  ();

    static_cast<@!Classname!@ *>(this)->@!field.ClearField!@();

    while(elemIt != elemEnd)
    {
        this->@!field.PushToField!@(*elemIt);

        ++elemIt;
    }
}

        @@endif // field.writeAssignMField
        @@if field.writeInsertIntoMField
void @!Classname!@Base::@!field.InsertIntoMField!@(UInt32               uiIndex,
                                                   @!field.Type!@ const value   )
{
            @@if field.ptrFieldNullCheckAccess
    if(value == NULL)
        return;

            @@endif // field.ptrFieldNullCheckAccess
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    MF@!field.FieldTypeCaps!@::iterator fieldIt = _mf@!field.Name!@.begin_nc();

    fieldIt += uiIndex;

    _mf@!field.Name!@.insert(fieldIt, value);
}

        @@endif // field.writeInsertIntoMField
        @@if field.writeReplaceInMFieldIndex
void @!Classname!@Base::@!field.ReplaceInMFieldIndex!@(UInt32               uiIndex,
                                                       @!field.Type!@ const value   )
{
            @@if field.ptrFieldNullCheckAccess
    if(value == NULL)
        return;

            @@endif // field.ptrFieldNullCheckAccess
    if(uiIndex >= _mf@!field.Name!@.size())
        return;

    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    _mf@!field.Name!@.replace(uiIndex, value);
}

        @@endif // field.writeReplaceInMFieldIndex
        @@if field.writeReplaceInMFieldObject
void @!Classname!@Base::@!field.ReplaceInMFieldObject!@(@!field.Type!@ const pOldElem,
                                                        @!field.Type!@ const pNewElem)
{
            @@if field.ptrFieldNullCheckAccess
    if(pNewElem == NULL)
        return;

            @@endif // field.ptrFieldNullCheckAccess
    Int32  elemIdx = _mf@!field.Name!@.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

        _mf@!field.Name!@.replace(elemIdx, pNewElem);
    }
}

        @@endif // field.writeReplaceInMFieldObject
        @@if field.writeRemoveFromMFieldIndex
void @!Classname!@Base::@!field.RemoveFromMFieldIndex!@(UInt32 uiIndex)
{
    if(uiIndex < _mf@!field.Name!@.size())
    {
        editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

            @@if field.isRemoveToSet
        _mf@!field.Name!@.replace(uiIndex, @!field.RemoveTo!@);
            @@else // field.isRemoveToSet
        _mf@!field.Name!@.erase(uiIndex);
            @@endif // field.isRemoveToSet
    }
}

        @@endif // field.writeRemoveFromMFieldIndex
        @@if field.writeRemoveFromMFieldObject
void @!Classname!@Base::@!field.RemoveFromMFieldObject!@(@!field.Type!@ const value)
{
    Int32 iElemIdx = _mf@!field.Name!@.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

            @@if field.isRemoveToSet
        _mf@!field.Name!@.replace(iElemIdx, @!field.RemoveTo!@);
            @@else // field.isRemoveToSet
        _mf@!field.Name!@.erase(iElemIdx);
            @@endif // field.isRemoveToSet
    }
}
        @@endif // field.writeRemoveFromMFieldObject
        @@if field.writeClearField
void @!Classname!@Base::@!field.ClearField!@(void)
{
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

            @@if field.isRemoveToSet
    MF@!field.FieldTypeCaps!@::iterator       fieldIt  = _mf@!field.Name!@.begin_nc();
    MF@!field.FieldTypeCaps!@::const_iterator fieldEnd = _mf@!field.Name!@.end  ();

    while(fieldIt != fieldEnd)
    {
        _mf@!field.Name!@.replace(fieldIt, @!field.RemoveTo!@);

        ++fieldIt;
    }
            @@else // field.isRemoveToSet
            @@if field.doClearMField

    _mf@!field.Name!@.clear();
            @@endif // field.doClearMField
            @@endif // field.isRemoveToSet
}
        @@endif // field.writeClearField

    @@endif //!field.noAccess
    @@endif // field.isPtrField
@@EndMFFieldLoop@@


/*------------------------------ access -----------------------------------*/

UInt32 @!Classname!@Base::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

@@if isDecorator
    if(FieldBits::NoField != (DecorateeFieldMask & whichField))
    {
        returnValue += _sfDecoratee.getBinSize();
    }
@@else // isDecorator
    @@BeginFieldLoop@@
    if(FieldBits::NoField != (@!field.Name!@FieldMask & whichField))
    {
        returnValue += _@!field.VarName!@.getBinSize();
    }
    @@EndFieldLoop@@
@@endif // isDecorator

    return returnValue;
}

void @!Classname!@Base::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

@@if isDecorator
    if(FieldBits::NoField != (DecorateeFieldMask & whichField))
    {
        _sfDecoratee.copyToBin(pMem);
    }
@@else // isDecorator
    @@BeginFieldLoop@@
    if(FieldBits::NoField != (@!field.Name!@FieldMask & whichField))
    {
        _@!field.VarName!@.copyToBin(pMem);
    }
    @@EndFieldLoop@@
@@endif // isDecorator
}

void @!Classname!@Base::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

@@if isDecorator
    if(FieldBits::NoField != (DecorateeFieldMask & whichField))
    {
        _sfDecoratee.copyFromBin(pMem);
    }
@@else // isDecorator
    @@BeginFieldLoop@@
    if(FieldBits::NoField != (@!field.Name!@FieldMask & whichField))
    {
        _@!field.VarName!@.copyFromBin(pMem);
    }
    @@EndFieldLoop@@
@@endif // isDecorator
}

@@if !isAbstract
//! create a new instance of the class
@!Classname!@TransitPtr @!Classname!@Base::createLocal(BitVector bFlags)
{
    @!Classname!@TransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<@!Classname!@>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
@!Classname!@TransitPtr @!Classname!@Base::createDependent(BitVector bFlags)
{
    @!Classname!@TransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<@!Classname!@>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
@!Classname!@TransitPtr @!Classname!@Base::create(void)
{
@@if !isBundle
    @!Classname!@TransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<@!Classname!@>(tmpPtr);
    }

    return fc;
@@else
    return createLocal();
@@endif
}
@@endif // !isAbstract

@@if !isAbstract
@!Classname!@ *@!Classname!@Base::createEmptyLocal(BitVector bFlags)
{
    @!Classname!@ *returnValue;

    newPtr<@!Classname!@>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
@!Classname!@ *@!Classname!@Base::createEmpty(void)
{
@@if !isBundle
    @!Classname!@ *returnValue;

    newPtr<@!Classname!@>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
@@else
    return createEmptyLocal();
@@endif
}
@@if supportUnregisteredCreate

@!Classname!@ *@!Classname!@Base::createUnregistered(void)
{
    @!Classname!@ *returnValue = new @!Classname!@;

#ifdef OSG_MT_CPTR_ASPECT
    returnValue->setupAspectStore();
#endif
    //Do not register with the FieldContainer Factory

    returnValue->onCreate      (      );
    returnValue->onCreateAspect(returnValue);
    
    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();
    
    return returnValue;
}
@@endif


FieldContainerTransitPtr @!Classname!@Base::shallowCopyLocal(
    BitVector bFlags) const
{
    @!Classname!@ *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const @!Classname!@ *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr @!Classname!@Base::shallowCopyDependent(
    BitVector bFlags) const
{
    @!Classname!@ *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const @!Classname!@ *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr @!Classname!@Base::shallowCopy(void) const
{
@@if !isBundle
    @!Classname!@ *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const @!Classname!@ *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
@@else
    return shallowCopyLocal();
@@endif
}


@@endif // !isAbstract

@@if hasProducedEvents
/*------------------------- event producers ----------------------------------*/
void @!Classname!@Base::produceEvent(UInt32 eventId, EventDetails* const e)
{
    switch(eventId)
    {
@@BeginProducedEventLoop@@
    case @!producedEvent.Name!@EventId:
        OSG_ASSERT(dynamic_cast<@!producedEvent.Name!@EventDetailsType* const>(e));

    @@if producedEvent.consumable 
        _@!producedEvent.Name!@Event.set_combiner(ConsumableEventCombiner(e));
    @@endif // producedEvent.consumable
        _@!producedEvent.Name!@Event(dynamic_cast<@!producedEvent.Name!@EventDetailsType* const>(e), @!producedEvent.Name!@EventId);
        break;
@@EndProducedEventLoop@@
    default:
    @@if isRootProducer 
        SWARNING << "No event defined with that ID";
    @@else
        Inherited::produceEvent(eventId, e);
    @@endif // !isRootProducer
        break;
    }
}

boost::signals2::connection @!Classname!@Base::connectEvent(UInt32 eventId, 
                                                             const BaseEventType::slot_type &listener, 
                                                             boost::signals2::connect_position at)
{
    switch(eventId)
    {
@@BeginProducedEventLoop@@
    case @!producedEvent.Name!@EventId:
        return _@!producedEvent.Name!@Event.connect(listener, at);
        break;
@@EndProducedEventLoop@@
    default:
    @@if isRootProducer 
        SWARNING << "No event defined with that ID";
        return boost::signals2::connection();
    @@else
        return Inherited::connectEvent(eventId, listener, at);
    @@endif // !isRootProducer
        break;
    }

    return boost::signals2::connection();
}

boost::signals2::connection  @!Classname!@Base::connectEvent(UInt32 eventId, 
                                                              const BaseEventType::group_type &group,
                                                              const BaseEventType::slot_type &listener,
                                                              boost::signals2::connect_position at)
{
    switch(eventId)
    {
@@BeginProducedEventLoop@@
    case @!producedEvent.Name!@EventId:
        return _@!producedEvent.Name!@Event.connect(group, listener, at);
        break;
@@EndProducedEventLoop@@
    default:
    @@if isRootProducer 
        SWARNING << "No event defined with that ID";
        return boost::signals2::connection();
    @@else
        return Inherited::connectEvent(eventId, group, listener, at);
    @@endif // !isRootProducer
        break;
    }

    return boost::signals2::connection();
}
    
void  @!Classname!@Base::disconnectEvent(UInt32 eventId, const BaseEventType::group_type &group)
{
    switch(eventId)
    {
@@BeginProducedEventLoop@@
    case @!producedEvent.Name!@EventId:
        _@!producedEvent.Name!@Event.disconnect(group);
        break;
@@EndProducedEventLoop@@
    default:
    @@if isRootProducer 
        SWARNING << "No event defined with that ID";
    @@else
        return Inherited::disconnectEvent(eventId, group);
    @@endif // !isRootProducer
        break;
    }
}

void  @!Classname!@Base::disconnectAllSlotsEvent(UInt32 eventId)
{
    switch(eventId)
    {
@@BeginProducedEventLoop@@
    case @!producedEvent.Name!@EventId:
        _@!producedEvent.Name!@Event.disconnect_all_slots();
        break;
@@EndProducedEventLoop@@
    default:
    @@if isRootProducer 
        SWARNING << "No event defined with that ID";
    @@else
        Inherited::disconnectAllSlotsEvent(eventId);
    @@endif // !isRootProducer
        break;
    }
}

bool  @!Classname!@Base::isEmptyEvent(UInt32 eventId) const
{
    switch(eventId)
    {
@@BeginProducedEventLoop@@
    case @!producedEvent.Name!@EventId:
        return _@!producedEvent.Name!@Event.empty();
        break;
@@EndProducedEventLoop@@
    default:
    @@if isRootProducer 
        SWARNING << "No event defined with that ID";
        return true;
    @@else
        return Inherited::isEmptyEvent(eventId);
    @@endif // !isRootProducer
        break;
    }
}

UInt32  @!Classname!@Base::numSlotsEvent(UInt32 eventId) const
{
    switch(eventId)
    {
@@BeginProducedEventLoop@@
    case @!producedEvent.Name!@EventId:
        return _@!producedEvent.Name!@Event.num_slots();
        break;
@@EndProducedEventLoop@@
    default:
    @@if isRootProducer 
        SWARNING << "No event defined with that ID";
        return 0;
    @@else
        return Inherited::numSlotsEvent(eventId);
    @@endif // !isRootProducer
        break;
    }
}


@@endif  // hasProducedEvents
/*------------------------- constructors ----------------------------------*/

@!Classname!@Base::@!Classname!@Base(void) :
@@if !hasFields
    Inherited()
@@else // !hasFields
    Inherited(),
    @@if hasFields
        @@if isDecorator
    _sfDecoratee()
        @@else // isDecorator
            @@BeginFieldLoop@@
                @@if field.isChildField
    _@!field.VarName:25!@(this,
                          @!field.Name!@FieldId,
                          @!field.TypeRaw!@::@!field.linkParentField!@FieldId)@!field.Separator!@
                @@else
    _@!field.VarName:25!@(@!field.TypedDefault!@)@!field.Separator!@
                @@endif
            @@EndFieldLoop@@
        @@endif // isDecorator
    @@endif // hasFields
@@endif // !hasFields
{
}

@!Classname!@Base::@!Classname!@Base(const @!Classname!@Base &source) :
@@if !hasFields
    Inherited(source)
@@else // !hasFields
    Inherited(source),
    @@if hasFields
    @@if isDecorator
    _sfDecoratee(source._sfDecoratee)
    @@else // isDecorator
        @@BeginFieldLoop@@
            @@if field.isPtrField
                @@if field.isChildField
    _@!field.VarName:25!@(this,
                          @!field.Name!@FieldId,
                          @!field.TypeRaw!@::@!field.linkParentField!@FieldId)@!field.Separator!@
                @@else
                    @@if field.isSField
    _@!field.VarName:25!@(NULL)@!field.Separator!@
                    @@else
    _@!field.VarName:25!@()@!field.Separator!@
                    @@endif // isSField
                @@endif // ChildField
            @@else // field.isPtrField
    _@!field.VarName:25!@(source._@!field.VarName:25!@)@!field.Separator!@
            @@endif // field.isPtrField
        @@EndFieldLoop@@
    @@endif // isDecorator
    @@endif // hasFields
@@endif // !hasFields
{
}


/*-------------------------- destructors ----------------------------------*/

@!Classname!@Base::~@!Classname!@Base(void)
{
}
@@if hasParentFields
/*-------------------------------------------------------------------------*/
/* Parent linking                                                          */

bool @!Classname!@Base::linkParent(
    FieldContainer * const pParent,
    UInt16           const childFieldId,
    UInt16           const parentFieldId )
{
    @@BeginFieldLoop@@
        @@if field.isParentField
    if(parentFieldId == @!field.Name!@FieldId)
    {
        @!field.Type!@ pTypedParent =
            dynamic_cast< @!field.Type!@ >(pParent);

        if(pTypedParent != NULL)
        {
            @@if field.isSField
            FieldContainer *pOldParent =
                _@!field.VarName!@.getValue         ();

            UInt16 oldChildFieldId =
                _@!field.VarName!@.getParentFieldPos();

            if(pOldParent != NULL)
            {
                pOldParent->unlinkChild(this, oldChildFieldId);
            }

            editSField(@!field.Name!@FieldMask);

            _@!field.VarName!@.setValue(static_cast<@!field.TypeNS!@@!field.Type!@>(pParent), childFieldId);
            @@endif // @!field.cardinality!@ == "single"
            @@if field.isMField
            editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

            _@!field.VarName!@.push_back(pParent, childFieldId);
            @@endif // @!field.cardinality!@ == "multi"

            return true;
        }

        return false;
    }

        @@endif // @!field.category!@ == "pointer" and @!field.pointertype!@ == "parent"
    @@EndFieldLoop@@
    return Inherited::linkParent(pParent, childFieldId, parentFieldId);
}

bool @!Classname!@Base::unlinkParent(
    FieldContainer * const pParent,
    UInt16           const parentFieldId)
{
    @@BeginFieldLoop@@
        @@if field.isParentField
    if(parentFieldId == @!field.Name!@FieldId)
    {
        @!field.TypeNS!@@!field.Type!@ pTypedParent =
            dynamic_cast< @!field.FieldTypeNS!@@!field.Type!@ >(pParent);

        if(pTypedParent != NULL)
        {
            @@if field.isSField
            if(_@!field.VarName!@.getValue() == pParent)
            {
                editSField(@!field.Name!@FieldMask);

                _@!field.VarName!@.setValue(NULL, 0xFFFF);

                return true;
            }
            @@endif // @!field.cardinality!@ == "single"
            @@if field.isMField
            Int32 iParentIdx = _@!field.VarName!@.findIndex(pParent);

            if(iParentIdx != -1)
            {
                editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

                _@!field.VarName!@.erase(iParentIdx);

                return true;
            }
            @@endif // @!field.cardinality!@ == "multi"

            FWARNING(("@!Classname!@Base::unlinkParent: "
                      "Child <-> Parent link inconsistent.\n"));

            return false;
        }

        return false;
    }

        @@endif // @!field.category!@ == "pointer" and @!field.pointertype!@ == "parent"
    @@EndFieldLoop@@
    return Inherited::unlinkParent(pParent, parentFieldId);
}

@@endif // @!hasParentFields!@

@@if hasChildFields
/*-------------------------------------------------------------------------*/
/* Child linking                                                           */

bool @!Classname!@Base::unlinkChild(
    FieldContainer * const pChild,
    UInt16           const childFieldId)
{
    @@BeginFieldLoop@@
        @@if field.isChildField
    if(childFieldId == @!field.Name!@FieldId)
    {
        @!field.TypeNS!@@!field.Type!@ pTypedChild =
            dynamic_cast<@!field.TypeNS!@@!field.Type!@>(pChild);

        if(pTypedChild != NULL)
        {
            @@if field.isSField
            if(pTypedChild == _@!field.VarName!@.getValue())
            {
                editSField(@!field.Name!@FieldMask);

                _@!field.VarName!@.setValue(NULL);

                return true;
            }
            @@endif // @!field.cardinality!@ == "single"
            @@if field.isMField
            Int32 iChildIdx = _@!field.VarName!@.findIndex(pTypedChild);

            if(iChildIdx != -1)
            {
                editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

                _@!field.VarName!@.erase(iChildIdx);

                return true;
            }
            @@endif // @!field.cardinality!@ == "multi"

            FWARNING(("@!Classname!@Base::unlinkParent: Child <-> "
                      "Parent link inconsistent.\n"));

            return false;
        }

        return false;
    }

        @@endif // @!field.category!@ == "pointer" and @!field.pointertype!@ == "child"
    @@EndFieldLoop@@

    return Inherited::unlinkChild(pChild, childFieldId);
}

@@endif // @!hasChildFields!@
@@if hasPtrFields
void @!Classname!@Base::onCreate(const @!Classname!@ *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        @!Classname!@ *pThis = static_cast<@!Classname!@ *>(this);
    @@BeginFieldLoop@@
        @@if field.isPtrField
        @@if !field.noAccess
            @@if field.isMField

        MF@!field.FieldTypeCaps!@::const_iterator @!field.Name!@It  =
            source->_mf@!field.Name!@.begin();
        MF@!field.FieldTypeCaps!@::const_iterator @!field.Name!@End =
            source->_mf@!field.Name!@.end  ();

        while(@!field.Name!@It != @!field.Name!@End)
        {
            pThis->@!field.PushToField!@(*@!field.Name!@It);

            ++@!field.Name!@It;
        }
            @@else // field.isMField

        pThis->set@!field.Name!@(source->get@!field.Name!@());
            @@endif // field.isMField
        @@endif //!field.noAccess
        @@endif // field.isPtrField
    @@EndFieldLoop@@
    }
}
@@endif // hasPtrFields

@@if isDecorator
GetFieldHandlePtr  @!Classname!@Base::getHandleDecoratee (void) const
{
    SFUnrec@!Parent!@Ptr::GetHandlePtr returnValue(
        new SFUnrec@!Parent!@Ptr::GetHandle(
            &_sfDecoratee,
            this->getType().getFieldDesc(DecorateeFieldId),
            const_cast<@!Classname!@Base *>(this)));

    return returnValue;
}

EditFieldHandlePtr @!Classname!@Base::editHandleDecoratee(void)
{
    SFUnrec@!Parent!@Ptr::EditHandlePtr returnValue(
        new SFUnrec@!Parent!@Ptr::EditHandle(
            &_sfDecoratee,
            this->getType().getFieldDesc(DecorateeFieldId),
            this));

    returnValue->setSetMethod(boost::bind(&@!Classname!@::setDecoratee,
                              static_cast<@!Classname!@ *>(this), _1));

    editSField(DecorateeFieldMask);

    return returnValue;
}

@@endif // isDecorator
@@BeginFieldLoop@@
GetFieldHandlePtr @!Classname!@Base::getHandle@!field.Name:15!@ (void) const
{
@@if !field.noAccess
    @!field.CARD!@@!field.FieldTypeCaps!@::GetHandlePtr returnValue(
        new  @!field.CARD!@@!field.FieldTypeCaps!@::GetHandle(
             &_@!field.VarName!@,
             this->getType().getFieldDesc(@!field.Name!@FieldId),
             const_cast<@!Classname!@Base *>(this)));
@@else // !field.noAccess
    @!field.CARD!@@!field.FieldTypeCaps!@::GetHandlePtr returnValue;
@@endif

    return returnValue;
}

EditFieldHandlePtr @!Classname!@Base::editHandle@!field.Name:15!@(void)
{
@@if !field.noAccess
    @!field.CARD!@@!field.FieldTypeCaps!@::EditHandlePtr returnValue(
        new  @!field.CARD!@@!field.FieldTypeCaps!@::EditHandle(
             &_@!field.VarName!@,
             this->getType().getFieldDesc(@!field.Name!@FieldId),
             this));

    @@if field.isMField
        @@if field.isPtrField
            @@if field.hasPushToField
    returnValue->setAddMethod(
        boost::bind(&@!Classname!@::@!field.PushToField!@,
                    static_cast<@!Classname!@ *>(this), _1));
            @@endif
            @@if field.hasInsertIntoMField
    returnValue->setInsertMethod(
        boost::bind(&@!Classname!@::@!field.InsertIntoMField!@,
                    static_cast<@!Classname!@ *>(this), _1, _2));
            @@endif
            @@if field.hasReplaceInMFieldIndex
    returnValue->setReplaceMethod(
        boost::bind(&@!Classname!@::@!field.ReplaceInMFieldIndex!@,
                    static_cast<@!Classname!@ *>(this), _1, _2));
            @@endif
            @@if field.hasReplaceInMFieldObject
    returnValue->setReplaceObjMethod(
        boost::bind(&@!Classname!@::@!field.ReplaceInMFieldObject!@,
                    static_cast<@!Classname!@ *>(this), _1, _2));
            @@endif
            @@if field.hasRemoveFromMFieldIndex
    returnValue->setRemoveMethod(
        boost::bind(&@!Classname!@::@!field.RemoveFromMFieldIndex!@,
                    static_cast<@!Classname!@ *>(this), _1));
            @@endif
            @@if field.hasRemoveFromMFieldObject
    returnValue->setRemoveObjMethod(
        boost::bind(&@!Classname!@::@!field.RemoveFromMFieldObject!@,
                    static_cast<@!Classname!@ *>(this), _1));
            @@endif
            @@if field.hasClearField
    returnValue->setClearMethod(
        boost::bind(&@!Classname!@::@!field.ClearField!@,
                    static_cast<@!Classname!@ *>(this)));
            @@endif
        @@endif

    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);
    @@else // field.isMField
        @@if field.isPtrField
    returnValue->setSetMethod(
        boost::bind(&@!Classname!@::set@!field.Name!@,
                    static_cast<@!Classname!@ *>(this), _1));
        @@endif

    editSField(@!field.Name!@FieldMask);
    @@endif // field.isMField
@@else // !field.noAccess
    EditFieldHandlePtr returnValue;
@@endif

    return returnValue;
}

@@EndFieldLoop@@

@@if hasProducedEvents
@@BeginProducedEventLoop@@
GetEventHandlePtr @!Classname!@Base::getHandle@!producedEvent.Name!@Signal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<@!producedEvent.Name!@EventType>(
             const_cast<@!producedEvent.Name!@EventType *>(&_@!producedEvent.Name!@Event),
             _producerType.getEventDescription(@!producedEvent.Name!@EventId),
             const_cast<@!Classname!@Base *>(this)));

    return returnValue;
}

@@EndProducedEventLoop@@
@@endif  // hasProducedEvents

#ifdef OSG_MT_CPTR_ASPECT
void @!Classname!@Base::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    @!Classname!@ *pThis = static_cast<@!Classname!@ *>(this);

    pThis->execSync(static_cast<@!Classname!@ *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


@@if !isAbstract
#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *@!Classname!@Base::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    @!Classname!@ *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const @!Classname!@ *>(pRefAspect),
                  dynamic_cast<const @!Classname!@ *>(this));

    return returnValue;
}
#endif
@@endif // !isAbstract

void @!Classname!@Base::resolveLinks(void)
{
@@if isDecorator
    static_cast<@!Classname!@ *>(this)->setDecoratee(NULL);    

@@endif
    Inherited::resolveLinks();
@@BeginFieldLoop@@
    @@if field.isPtrField
    @@if !field.noAccess
      @@if field.isSField

    static_cast<@!Classname!@ *>(this)->set@!field.Name!@(NULL);
      @@else

    static_cast<@!Classname!@ *>(this)->@!field.ClearField!@();
      @@endif
    @@endif //!field.noAccess
    @@endif // field.isPtrField
@@EndFieldLoop@@

@@if hasValueMField
#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif
@@endif

@@BeginMFFieldLoop@@
    @@if !field.isPtrField
#ifdef OSG_MT_CPTR_ASPECT
    _@!field.VarName!@.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
    @@endif // field.isPtrField
@@EndMFFieldLoop@@
}

@@if isDecoratable
/*------------------------------ get -----------------------------------*/

    @@if !isDecorator
        @@BeginSFFieldLoop@@
            @@if field.isPtrField

//! Get the value of the @!Classname!@::_@!field.VarName!@ field.
@!field.Type!@ @!Classname!@Base::get@!field.Name!@(void) const
{
    return _@!field.VarName!@.getValue();
}

//! Set the value of the @!Classname!@::_@!field.VarName!@ field.
void @!Classname!@Base::set@!field.Name!@(@!field.Type!@ const value)
{
    editSField(@!field.Name!@FieldMask);

    _@!field.VarName!@.setValue(value);
}
            @@else // field.isPtrField
//! Get the value of the @!Classname!@::_@!field.VarName!@ field.

@!field.FullType!@ &@!Classname!@Base::edit@!field.Name!@(void)
{
    editSField(@!field.Name!@FieldMask);

    return _@!field.VarName!@.getValue();
}

//! Get the value of the @!Classname!@::_@!field.VarName!@ field.
@!field.RetConst!@ @!field.FullType!@ @!field.RetRef!@@!Classname!@Base::get@!field.Name!@(void) const
{
    return _@!field.VarName!@.getValue();
}


//! Set the value of the @!Classname!@::_@!field.VarName!@ field.
void @!Classname!@Base::set@!field.Name!@(const @!field.FullType!@ @!field.ArgRef!@value)
{
    editSField(@!field.Name!@FieldMask);

    _@!field.VarName!@.setValue(value);
}
            @@endif // field.isPtrField
        @@EndSFFieldLoop@@

        @@BeginMFFieldLoop@@
//! Get the value of the \a index element the @!Classname!@::_@!field.VarName!@ field.
            @@if field.isPtrField
@!field.Type!@ @!Classname!@Base::get@!field.Name!@(const UInt32 index) const
            @@else // field.isPtrField
@!field.RetConst!@ @!field.Type!@ @!field.RetRef!@@!Classname!@Base::get@!field.Name!@(const UInt32 index) const
            @@endif // field.isPtrField
{
    return _@!field.VarName!@[index];
}
            @@if !field.isPtrField

@!field.Type!@ &@!Classname!@Base::edit@!field.Name!@(const UInt32 index)
{
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    return _@!field.VarName!@[index];
}

//! Get the @!Classname!@::_@!field.VarName!@ field.
@!field.FieldTypeNS!@@!field.CARD!@@!field.TypeCaps!@ &@!Classname!@Base::edit@!field.Name!@(void)
{
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    return _@!field.VarName!@;
}

            @@endif // !field.isPtrField

//! Get the @!Classname!@::_@!field.VarName!@ field.
const @!field.FieldTypeNS!@@!field.CARD!@@!field.TypeCaps!@ &@!Classname!@Base::get@!field.Name!@(void) const
{
    return _@!field.VarName!@;
}

        @@EndMFFieldLoop@@
    @@else // !isDecorator
        @@BeginSFFieldLoop@@
            @@if field.isPtrField

//! Get the value of the @!Classname!@::_@!field.VarName!@ field.
@!field.Type!@ @!Classname!@Base::get@!field.Name!@(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->get@!field.Name!@();
    }
    else
    {
        return Inherited::get@!field.Name!@();
    }
}

//! Set the value of the @!Classname!@::_@!field.VarName!@ field.
void @!Classname!@Base::set@!field.Name!@(@!field.Type!@ const value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->set@!field.Name!@(value);
    }
    else
    {
        Inherited::set@!field.Name!@(value);
    }
}
            @@else // field.isPtrField

//! Get the value of the @!Classname!@::_@!field.VarName!@ field.
@!field.FullType!@ &@!Classname!@Base::edit@!field.Name!@(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->edit@!field.Name!@();
    }
    else
    {
        return Inherited::edit@!field.Name!@();
    }
}

//! Get the value of the @!Classname!@::_@!field.VarName!@ field.
@!field.RetConst!@ @!field.FullType!@ @!field.RetRef!@@!Classname!@Base::get@!field.Name!@(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->get@!field.Name!@();
    }
    else
    {
        return Inherited::get@!field.Name!@();
    }
}


//! Set the value of the @!Classname!@::_@!field.VarName!@ field.
void @!Classname!@Base::set@!field.Name!@(const @!field.FullType!@ @!field.ArgRef!@value)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        getDecoratee()->set@!field.Name!@(value);
    }
    else
    {
        Inherited::set@!field.Name!@(value);
    }
}
            @@endif // field.isPtrField
        @@EndSFFieldLoop@@

        @@BeginMFFieldLoop@@
//! Get the value of the \a index element the @!Classname!@::_@!field.VarName!@ field.
            @@if field.isPtrField
@!field.Type!@ @!Classname!@Base::get@!field.Name!@(const UInt32 index) const
            @@else // field.isPtrField
@!field.RetConst!@ @!field.Type!@ @!field.RetRef!@@!Classname!@Base::get@!field.Name!@(const UInt32 index) const
            @@endif // field.isPtrField
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->get@!field.Name!@(index);
    }
    else
    {
        return Inherited::get@!field.Name!@(index);
    }
}
            @@if !field.isPtrField

@!field.Type!@ &@!Classname!@Base::edit@!field.Name!@(const UInt32 index)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->edit@!field.Name!@(index);
    }
    else
    {
        return Inherited::edit@!field.Name!@(index);
    }
}

//! Get the @!Classname!@::_@!field.VarName!@ field.
@!field.FieldTypeNS!@@!field.CARD!@@!field.TypeCaps!@ &@!Classname!@Base::edit@!field.Name!@(void)
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->edit@!field.Name!@();
    }
    else
    {
        return Inherited::edit@!field.Name!@();
    }
}
            @@endif // !field.isPtrField

//! Get the @!Classname!@::_@!field.VarName!@ field.
const @!field.FieldTypeNS!@@!field.CARD!@@!field.TypeCaps!@ &@!Classname!@Base::get@!field.Name!@(void) const
{
    if(_sfDecoratee.getValue() != NULL)
    {
        return getDecoratee()->get@!field.Name!@();
    }
    else
    {
        return Inherited::get@!field.Name!@();
    }
}

        @@EndMFFieldLoop@@
    @@endif // !isDecorator
@@endif // isDecoratable

OSG_END_NAMESPACE
