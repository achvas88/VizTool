/*---------------------------------------------------------------------------*\
 *                             VizTool                                 		 *
 *                                                                           *
 *               Copyright (C) 2010-2011 by Achyuthan Vasanth                *
 *                                                                           *
@@if hasAuthors
 *   authors:  @!Authors!@*
@@else // hasAuthors
 *   authors: achvas88@gmail.com                                             *
@@endif // hasAuthors
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published            *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU General Public                 *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _VT@!CLASSNAME!@FIELDS_H_
#define _VT@!CLASSNAME!@FIELDS_H_
#ifdef __sgi
#pragma once
#endif

@@if useLocalIncludes
#include "@!HeaderPrefix!@OSGConfig.h"
@@else // useLocalIncludes
#include <@!HeaderPrefix!@OSGConfig.h>
@@endif // useLocalIncludes
@@if isInLibrary
#include "VT@!Libname!@Def.h"
@@endif

@@if useLocalIncludes
#include "@!HeaderPrefix!@OSGFieldContainerFields.h"
#include "@!HeaderPrefix!@OSGPointerSField.h"
#include "@!HeaderPrefix!@OSGPointerMField.h"
@@else // useLocalIncludes
#include <@!HeaderPrefix!@OSGFieldContainerFields.h>
#include <@!HeaderPrefix!@OSGPointerSField.h>
#include <@!HeaderPrefix!@OSGPointerMField.h>
@@endif // useLocalIncludes


OSG_BEGIN_NAMESPACE

class @!Classname!@;

OSG_GEN_CONTAINERPTR(@!Classname!@);

@@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldTraits
    \ingroup GrpLibOSG@!Libname!@
 */
@@endif
template <>
struct FieldTraits<@!Classname!@ *> :
    public FieldTraitsFCPtrBase<@!Classname!@ *>
{
  private:

    static DataType             _type;

  public:

    typedef FieldTraits<@!Classname!@ *>  Self;

    enum                        { Convertible = NotConvertible };

    @@if isInLibrary
    static VT_@!LIBNAME!@_DLLMAPPING DataType &getType(void);
    @@else // isInLibrary
    static DataType &getType(void);
    @@endif // isInLibrary

@@if SFPointerField
    template<typename RefCountPolicy> inline
    static const Char8    *getSName     (void);

//    static const char *getSName(void) { return "SF@!Classname!@Ptr"; }
@@endif // SFPointerField
@@if MFPointerField
    template<typename RefCountPolicy> inline
    static const Char8    *getMName     (void);

//    static const char *getMName(void) { return "MF@!Classname!@Ptr"; }
@@endif // MFPointerField
};

@@if SFPointerField
template<> inline
const Char8 *FieldTraits<@!Classname!@ *, 0>::getSName<RecordedRefCountPolicy>(void)
{
    return "SFRec@!Classname!@Ptr"; 
}

template<> inline
const Char8 *FieldTraits<@!Classname!@ *, 0>::getSName<UnrecordedRefCountPolicy>(void)
{
    return "SFUnrec@!Classname!@Ptr"; 
}

template<> inline
const Char8 *FieldTraits<@!Classname!@ *, 0>::getSName<WeakRefCountPolicy>(void)
{
    return "SFWeak@!Classname!@Ptr"; 
}

template<> inline
const Char8 *FieldTraits<@!Classname!@ *, 0>::getSName<NoRefCountPolicy>(void)
{
    return "SFUnrefd@!Classname!@Ptr"; 
}
@@endif

@@if MFPointerField
template<> inline
const Char8 *FieldTraits<@!Classname!@ *, 0>::getMName<RecordedRefCountPolicy>(void)
{
    return "MFRec@!Classname!@Ptr"; 
}

template<> inline
const Char8 *FieldTraits<@!Classname!@ *, 0>::getMName<UnrecordedRefCountPolicy>(void)
{
    return "MFUnrec@!Classname!@Ptr"; 
}

template<> inline
const Char8 *FieldTraits<@!Classname!@ *, 0>::getMName<WeakRefCountPolicy>(void)
{
    return "MFWeak@!Classname!@Ptr"; 
}

template<> inline
const Char8 *FieldTraits<@!Classname!@ *, 0>::getMName<NoRefCountPolicy>(void)
{
    return "MFUnrefd@!Classname!@Ptr"; 
}
@@endif

@@if ChildField

@@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldTraits
 */
@@endif
template <>
struct FieldTraits<@!Classname!@ *, @!ChildNS!@> :
    public FieldTraitsFCPtrBase<@!Classname!@ *, @!ChildNS!@>
{
  private:

  public:
    typedef FieldTraits<@!Classname!@ *, @!ChildNS!@>  Self;

    enum                        { Convertible = NotConvertible };
@@if PointerField

    @@if isInLibrary
    static VT_@!LIBNAME!@_DLLMAPPING DataType &getType(void);
    @@else // isInLibrary
    static DataType &getType(void);
    @@endif // isInLibrary
@@endif // PointerField
@@if SFPointerField

    template<typename RefCountPolicy> inline
    static const Char8    *getSName     (void);
@@endif // SFPointerField
@@if MFPointerField

    template<typename RefCountPolicy> inline
    static const Char8    *getMName     (void);
@@endif // MFPointerField
};

@@if SFPointerField
template<> inline
const Char8 *FieldTraits<@!Classname!@ *, @!ChildNS!@>::getSName<RecordedRefCountPolicy>(void)
{
    return "SFRecChild@!Classname!@Ptr"; 
}

template<> inline
const Char8 *FieldTraits<@!Classname!@ *, @!ChildNS!@>::getSName<UnrecordedRefCountPolicy>(void)
{
    return "SFUnrecChild@!Classname!@Ptr"; 
}

template<> inline
const Char8 *FieldTraits<@!Classname!@ *, @!ChildNS!@>::getSName<WeakRefCountPolicy>(void)
{
    return "SFWeakChild@!Classname!@Ptr"; 
}

template<> inline
const Char8 *FieldTraits<@!Classname!@ *, @!ChildNS!@>::getSName<NoRefCountPolicy>(void)
{
    return "SFUnrefdChild@!Classname!@Ptr"; 
}
@@endif

@@if MFPointerField
template<> inline
const Char8 *FieldTraits<@!Classname!@ *, @!ChildNS!@>::getMName<RecordedRefCountPolicy>(void)
{
    return "MFRecChild@!Classname!@Ptr"; 
}

template<> inline
const Char8 *FieldTraits<@!Classname!@ *, @!ChildNS!@>::getMName<UnrecordedRefCountPolicy>(void)
{
    return "MFUnrecChild@!Classname!@Ptr"; 
}

template<> inline
const Char8 *FieldTraits<@!Classname!@ *, @!ChildNS!@>::getMName<WeakRefCountPolicy>(void)
{
    return "MFWeakChild@!Classname!@Ptr"; 
}

template<> inline
const Char8 *FieldTraits<@!Classname!@ *, @!ChildNS!@>::getMName<NoRefCountPolicy>(void)
{
    return "MFUnrefdChild@!Classname!@Ptr"; 
}
@@endif

@@endif
@@if ParentField

@@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldTraits
 */
@@endif
template <>
struct FieldTraits<@!Classname!@ *, @!ParentNS!@> : 
    public FieldTraitsFCPtrBase<@!Classname!@ *, @!ParentNS!@>
{
  private:

    static  DataType                                _type;

  public:

    static const bool bIsPointerField = true;

    typedef FieldTraits<@!Classname!@ *, @!ParentNS!@>        Self;


    enum             { Convertible = Self::NotConvertible };
    
    static VT_@!LIBNAME!@_DLLMAPPING
                 DataType &getType (void);

    static const Char8    *getSName(void) 
    {
        return "SFParent@!Classname!@Ptr"; 
    }

    static const Char8    *getMName(void) 
    { 
        return "MFParent@!Classname!@Ptr"; 
    }
};
@@endif

#ifndef DOXYGEN_SHOULD_SKIP_THIS
@@if SFPointerField
    @@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldSFields */
    @@endif // isInLibrary
typedef PointerSField<@!Classname!@ *,
                      RecordedRefCountPolicy  > SFRec@!Classname!@Ptr;
    @@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldSFields */
    @@endif // isInLibrary
typedef PointerSField<@!Classname!@ *,
                      UnrecordedRefCountPolicy> SFUnrec@!Classname!@Ptr;
    @@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldSFields */
    @@endif // isInLibrary
typedef PointerSField<@!Classname!@ *,
                      WeakRefCountPolicy      > SFWeak@!Classname!@Ptr;
    @@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldSFields */
    @@endif // isInLibrary
typedef PointerSField<@!Classname!@ *,
                      NoRefCountPolicy        > SFUncounted@!Classname!@Ptr;

@@endif

@@if MFPointerField
    @@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldMFields */
    @@endif // isInLibrary
typedef PointerMField<@!Classname!@ *,
                      RecordedRefCountPolicy  > MFRec@!Classname!@Ptr;
    @@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldMFields */
    @@endif // isInLibrary
typedef PointerMField<@!Classname!@ *,
                      UnrecordedRefCountPolicy> MFUnrec@!Classname!@Ptr;
    @@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldMFields */
    @@endif // isInLibrary
typedef PointerMField<@!Classname!@ *,
                      WeakRefCountPolicy      > MFWeak@!Classname!@Ptr;
    @@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldMFields */
    @@endif // isInLibrary
typedef PointerMField<@!Classname!@ *,
                      NoRefCountPolicy        > MFUncounted@!Classname!@Ptr;


@@endif
@@if ChildSFields

    @@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldSFields */
    @@endif // isInLibrary
typedef ChildPointerSField<
          @!Classname!@ *, 
          UnrecordedRefCountPolicy,
          @!ChildNS!@             > SFUnrecChild@!Classname!@Ptr;

@@endif
@@if ChildMFields

    @@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldMFields */
    @@endif // isInLibrary
typedef ChildPointerMField<
          @!Classname!@ *, 
          UnrecordedRefCountPolicy,
          @!ChildNS!@             > MFUnrecChild@!Classname!@Ptr;

@@endif
@@if ParentSFields

    @@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldSFields */
    @@endif // isInLibrary
typedef ParentPointerSField<
          @!Classname!@ *, 
          NoRefCountPolicy,
          @!ParentNS!@    > SFParent@!Classname!@Ptr;
@@endif
@@if ParentMFields

    @@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldMFields */
    @@endif // isInLibrary
typedef ParentPointerMField<
          @!Classname!@ *, 
          NoRefCountPolicy,
          @!ParentNS!@    > MFParent@!Classname!@Ptr;

@@endif


#else // these are the doxygen hacks

@@if SFPointerField
    @@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldSFields \ingroup GrpLibOSG@!Libname!@ */
    @@endif // isInLibrary
struct SFRec@!Classname!@Ptr : 
    public PointerSField<@!Classname!@ *,
                         RecordedRefCountPolicy> {};
    @@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldSFields \ingroup GrpLibOSG@!Libname!@ */
    @@endif // isInLibrary
struct SFUnrec@!Classname!@Ptr : 
    public PointerSField<@!Classname!@ *,
                         UnrecordedRefCountPolicy> {};
    @@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldSFields \ingroup GrpLibOSG@!Libname!@ */
    @@endif // isInLibrary
struct SFWeak@!Classname!@Ptr :
    public PointerSField<@!Classname!@ *,
                         WeakRefCountPolicy> {};
    @@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldSFields \ingroup GrpLibOSG@!Libname!@ */
    @@endif // isInLibrary
struct SFUncounted@!Classname!@Ptr :
    public PointerSField<@!Classname!@ *,
                         NoRefCountPolicy> {};

@@endif

@@if MFPointerField
    @@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldMFields \ingroup GrpLibOSG@!Libname!@ */
    @@endif // isInLibrary
struct MFRec@!Classname!@Ptr :
    public PointerMField<@!Classname!@ *,
                         RecordedRefCountPolicy  > {};
    @@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldMFields \ingroup GrpLibOSG@!Libname!@ */
    @@endif // isInLibrary
struct MFUnrec@!Classname!@Ptr :
    public PointerMField<@!Classname!@ *,
                         UnrecordedRefCountPolicy> {};
    @@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldMFields \ingroup GrpLibOSG@!Libname!@ */
    @@endif // isInLibrary
struct MFWeak@!Classname!@Ptr :
    public PointerMField<@!Classname!@ *,
                         WeakRefCountPolicy      > {};
    @@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldMFields \ingroup GrpLibOSG@!Libname!@ */
    @@endif // isInLibrary
struct MFUncounted@!Classname!@Ptr :
    public PointerMField<@!Classname!@ *,
                         NoRefCountPolicy        > {};


@@endif
@@if ChildSFields

    @@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldSFields \ingroup GrpLibOSG@!Libname!@ */
    @@endif // isInLibrary
struct SFUnrecChild@!Classname!@Ptr :
    public ChildPointerSField<
        @!Classname!@ *, 
        UnrecordedRefCountPolicy,
        @!ChildNS!@             > {};

@@endif
@@if ChildMFields

    @@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldMFields \ingroup GrpLibOSG@!Libname!@ */
    @@endif // isInLibrary
struct MFUnrecChild@!Classname!@Ptr :
    public ChildPointerMField<
        @!Classname!@ *, 
        UnrecordedRefCountPolicy,
        @!ChildNS!@             > {};

@@endif
@@if ParentSFields

    @@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldSFields \ingroup GrpLibOSG@!Libname!@ */
    @@endif // isInLibrary
struct SFParent@!Classname!@Ptr :
    public ParentPointerSField<
        @!Classname!@ *, 
        NoRefCountPolicy,
        @!ParentNS!@    > {};
@@endif
@@if ParentMFields

    @@if isInLibrary
/*! \ingroup @!DocGroupBase!@FieldMFields \ingroup GrpLibOSG@!Libname!@ */
    @@endif // isInLibrary
struct MFParent@!Classname!@Ptr :
    public  ParentPointerMField<
        @!Classname!@ *, 
        NoRefCountPolicy,
        @!ParentNS!@    > {};

@@endif

#endif // these are the doxygen hacks

OSG_END_NAMESPACE

#endif /* _VT@!CLASSNAME!@FIELDS_H_ */
