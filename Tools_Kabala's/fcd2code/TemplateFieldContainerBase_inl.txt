/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *               Copyright (C) 2009-2010 by David Kabala                     *
 *                                                                           *
@@if hasAuthors
 *   authors:  @!Authors!@*
@@else // hasAuthors
 *   authors: djkabala@gmail.com                                             *
@@endif // hasAuthors
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published            *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU General Public                 *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class @!Classname!@!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

@@BeginProducedEventLoop@@
    @@if producedEvent.needTypeInclude
#include @!producedEvent.TypeInclude!@
    @@endif // producedEvent.needTypeInclude
@@EndProducedEventLoop@@

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &@!Classname!@Base::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 @!Classname!@Base::getClassTypeId(void)
{
    return _type.getId();
}
@@if hasProducedEvents 
//! access the producer type of the class
inline
const EventProducerType &@!Classname!@Base::getProducerClassType(void)
{
    return _producerType;
}

//! access the producer type id of the class
inline
UInt32 @!Classname!@Base::getProducerClassTypeId(void)
{
    return _producerType.getId();
}
@@endif 

inline
OSG::UInt16 @!Classname!@Base::getClassGroupId(void)
{
    return _type.getGroupId();
}

@@if !isDecorator
    @@if !isDecoratable
/*------------------------------ get -----------------------------------*/

        @@BeginSFFieldLoop@@
            @@if !field.noAccess
            @@if field.isPtrField

//! Get the value of the @!Classname!@::_@!field.VarName!@ field.
inline
@!field.FullType!@ @!Classname!@Base::get@!field.Name!@(void) const
{
    return _@!field.VarName!@.getValue();
}

              @@if !field.ptrFieldCustomAccess
//! Set the value of the @!Classname!@::_@!field.VarName!@ field.
inline
            @@if field.PassFieldMask
void @!Classname!@Base::set@!field.Name!@(@!field.Type!@ const value,
                             const UInt16                      uiStoredInFieldId)
            @@else // field.PassFieldMask
void @!Classname!@Base::set@!field.Name!@(@!field.Type!@ const value)
            @@endif // field.PassFieldMask
{
    editSField(@!field.Name!@FieldMask);

    _@!field.VarName!@.setValue(value);
}
@@endif
        @@else // field.isPtrField
//! Get the value of the @!Classname!@::_@!field.VarName!@ field.

inline
@!field.FullType!@ &@!Classname!@Base::edit@!field.Name!@(void)
{
    editSField(@!field.Name!@FieldMask);

    return _@!field.VarName!@.getValue();
}

//! Get the value of the @!Classname!@::_@!field.VarName!@ field.
inline
@!field.RetConst!@ @!field.FullType!@ @!field.RetRef!@@!Classname!@Base::get@!field.Name!@(void) const
{
    return _@!field.VarName!@.getValue();
}

//! Set the value of the @!Classname!@::_@!field.VarName!@ field.
inline
void @!Classname!@Base::set@!field.Name!@(const @!field.FullType!@ @!field.ArgRef!@value)
{
    editSField(@!field.Name!@FieldMask);

    _@!field.VarName!@.setValue(value);
}
        @@endif // field.isPtrField
        @@endif //!field.noAccess
        @@EndSFFieldLoop@@

        @@BeginMFFieldLoop@@
        @@if !field.noAccess
//! Get the value of the \a index element the @!Classname!@::_@!field.VarName!@ field.
inline
            @@if field.isPtrField
@!field.Type!@ @!Classname!@Base::get@!field.Name!@(const UInt32 index) const
            @@else // field.isPtrField
@!field.RetConst!@ @!field.FullType!@ @!field.RetRef!@@!Classname!@Base::get@!field.Name!@(const UInt32 index) const
            @@endif // field.isPtrField
{
    return _@!field.VarName!@[index];
}
            @@if !field.isPtrField

inline
@!field.FullType!@ &@!Classname!@Base::edit@!field.Name!@(const UInt32 index)
{
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    return _@!field.VarName!@[index];
}

            @@endif // !field.isPtrField

        @@endif //!field.noAccess
        @@EndMFFieldLoop@@
    @@endif // !isDecoratable
@@else // !isDecorator

inline
@!Parent!@ *@!Classname!@Base::getDecoratee(void) const
{
    return _sfDecoratee.getValue();
}

inline
void @!Classname!@Base::setDecoratee(@!Parent!@ * const value)
{
    editSField(DecorateeFieldMask);

    _sfDecoratee.setValue(value);
}
@@endif // !isDecorator

#ifdef OSG_MT_CPTR_ASPECT
inline
void @!Classname!@Base::execSync (      @!Classname!@Base *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);
@@if isDecorator

    if(FieldBits::NoField != (DecorateeFieldMask & whichField))
    {
        _sfDecoratee.syncWith(pFrom->_sfDecoratee);
    }
@@else // isDecorator
    @@BeginFieldLoop@@

    @@if field.isSField
    if(FieldBits::NoField != (@!field.Name!@FieldMask & whichField))
        _@!field.VarName!@.syncWith(pFrom->_@!field.VarName!@);
    @@else // field.isSField
    if(FieldBits::NoField != (@!field.Name!@FieldMask & whichField))
        _@!field.VarName!@.syncWith(pFrom->_@!field.VarName!@,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);
    @@endif // field.isSField
    @@EndFieldLoop@@
@@endif // isDecorator
}
#endif


inline
const Char8 *@!Classname!@Base::getClassname(void)
{
    return "@!Classname!@";
}
@@if hasProducedEvents 
@@if isRootProducer 

inline
UInt32 @!Classname!@Base::getNumProducedEvents(void) const
{
    return getProducerType().getNumEventDescs();
}

inline
const EventDescription *@!Classname!@Base::getProducedEventDescription(const std::string &ProducedEventName) const
{
    return getProducerType().findEventDescription(ProducedEventName);
}

inline
const EventDescription *@!Classname!@Base::getProducedEventDescription(UInt32 ProducedEventId) const
{
    return getProducerType().getEventDescription(ProducedEventId);
}

inline
UInt32 @!Classname!@Base::getProducedEventId(const std::string &ProducedEventName) const
{
    return getProducerType().getProducedEventId(ProducedEventName);
}

@@endif  // isRootProducer
@@BeginProducedEventLoop@@
inline
boost::signals2::connection  @!Classname!@Base::connect@!producedEvent.Name!@(const @!producedEvent.Name!@EventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _@!producedEvent.Name!@Event.connect(listener, at);
}

inline
boost::signals2::connection  @!Classname!@Base::connect@!producedEvent.Name!@(const @!producedEvent.Name!@EventType::group_type &group,
                                                    const @!producedEvent.Name!@EventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _@!producedEvent.Name!@Event.connect(group, listener, at);
}

inline
void  @!Classname!@Base::disconnect@!producedEvent.Name!@(const @!producedEvent.Name!@EventType::group_type &group)
{
    _@!producedEvent.Name!@Event.disconnect(group);
}

inline
void  @!Classname!@Base::disconnectAllSlots@!producedEvent.Name!@(void)
{
    _@!producedEvent.Name!@Event.disconnect_all_slots();
}

inline
bool  @!Classname!@Base::isEmpty@!producedEvent.Name!@(void) const
{
    return _@!producedEvent.Name!@Event.empty();
}

inline
UInt32  @!Classname!@Base::numSlots@!producedEvent.Name!@(void) const
{
    return _@!producedEvent.Name!@Event.num_slots();
}

inline
void @!Classname!@Base::produce@!producedEvent.Name!@(@!producedEvent.Name!@EventDetailsType* const e)
{
    produceEvent(@!producedEvent.Name!@EventId, e);
}

@@EndProducedEventLoop@@
@@endif  // hasProducedEvents
OSG_GEN_CONTAINERPTR(@!Classname!@);

OSG_END_NAMESPACE

